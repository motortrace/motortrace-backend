
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model CarOwnerProfile
 * 
 */
export type CarOwnerProfile = $Result.DefaultSelection<Prisma.$CarOwnerProfilePayload>
/**
 * Model Vehicle
 * 
 */
export type Vehicle = $Result.DefaultSelection<Prisma.$VehiclePayload>
/**
 * Model ServiceCenterProfile
 * 
 */
export type ServiceCenterProfile = $Result.DefaultSelection<Prisma.$ServiceCenterProfilePayload>
/**
 * Model PartSellerProfile
 * 
 */
export type PartSellerProfile = $Result.DefaultSelection<Prisma.$PartSellerProfilePayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model ServiceType
 * 
 */
export type ServiceType = $Result.DefaultSelection<Prisma.$ServiceTypePayload>
/**
 * Model ShopService
 * 
 */
export type ShopService = $Result.DefaultSelection<Prisma.$ShopServicePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.carOwnerProfile`: Exposes CRUD operations for the **CarOwnerProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarOwnerProfiles
    * const carOwnerProfiles = await prisma.carOwnerProfile.findMany()
    * ```
    */
  get carOwnerProfile(): Prisma.CarOwnerProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vehicle`: Exposes CRUD operations for the **Vehicle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vehicles
    * const vehicles = await prisma.vehicle.findMany()
    * ```
    */
  get vehicle(): Prisma.VehicleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceCenterProfile`: Exposes CRUD operations for the **ServiceCenterProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceCenterProfiles
    * const serviceCenterProfiles = await prisma.serviceCenterProfile.findMany()
    * ```
    */
  get serviceCenterProfile(): Prisma.ServiceCenterProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partSellerProfile`: Exposes CRUD operations for the **PartSellerProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PartSellerProfiles
    * const partSellerProfiles = await prisma.partSellerProfile.findMany()
    * ```
    */
  get partSellerProfile(): Prisma.PartSellerProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceType`: Exposes CRUD operations for the **ServiceType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceTypes
    * const serviceTypes = await prisma.serviceType.findMany()
    * ```
    */
  get serviceType(): Prisma.ServiceTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shopService`: Exposes CRUD operations for the **ShopService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShopServices
    * const shopServices = await prisma.shopService.findMany()
    * ```
    */
  get shopService(): Prisma.ShopServiceDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    CarOwnerProfile: 'CarOwnerProfile',
    Vehicle: 'Vehicle',
    ServiceCenterProfile: 'ServiceCenterProfile',
    PartSellerProfile: 'PartSellerProfile',
    Subscription: 'Subscription',
    ServiceType: 'ServiceType',
    ShopService: 'ShopService'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "carOwnerProfile" | "vehicle" | "serviceCenterProfile" | "partSellerProfile" | "subscription" | "serviceType" | "shopService"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      CarOwnerProfile: {
        payload: Prisma.$CarOwnerProfilePayload<ExtArgs>
        fields: Prisma.CarOwnerProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarOwnerProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarOwnerProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarOwnerProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarOwnerProfilePayload>
          }
          findFirst: {
            args: Prisma.CarOwnerProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarOwnerProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarOwnerProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarOwnerProfilePayload>
          }
          findMany: {
            args: Prisma.CarOwnerProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarOwnerProfilePayload>[]
          }
          create: {
            args: Prisma.CarOwnerProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarOwnerProfilePayload>
          }
          createMany: {
            args: Prisma.CarOwnerProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CarOwnerProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarOwnerProfilePayload>[]
          }
          delete: {
            args: Prisma.CarOwnerProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarOwnerProfilePayload>
          }
          update: {
            args: Prisma.CarOwnerProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarOwnerProfilePayload>
          }
          deleteMany: {
            args: Prisma.CarOwnerProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CarOwnerProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CarOwnerProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarOwnerProfilePayload>[]
          }
          upsert: {
            args: Prisma.CarOwnerProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarOwnerProfilePayload>
          }
          aggregate: {
            args: Prisma.CarOwnerProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCarOwnerProfile>
          }
          groupBy: {
            args: Prisma.CarOwnerProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarOwnerProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarOwnerProfileCountArgs<ExtArgs>
            result: $Utils.Optional<CarOwnerProfileCountAggregateOutputType> | number
          }
        }
      }
      Vehicle: {
        payload: Prisma.$VehiclePayload<ExtArgs>
        fields: Prisma.VehicleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VehicleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VehicleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          findFirst: {
            args: Prisma.VehicleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VehicleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          findMany: {
            args: Prisma.VehicleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>[]
          }
          create: {
            args: Prisma.VehicleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          createMany: {
            args: Prisma.VehicleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VehicleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>[]
          }
          delete: {
            args: Prisma.VehicleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          update: {
            args: Prisma.VehicleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          deleteMany: {
            args: Prisma.VehicleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VehicleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VehicleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>[]
          }
          upsert: {
            args: Prisma.VehicleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          aggregate: {
            args: Prisma.VehicleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVehicle>
          }
          groupBy: {
            args: Prisma.VehicleGroupByArgs<ExtArgs>
            result: $Utils.Optional<VehicleGroupByOutputType>[]
          }
          count: {
            args: Prisma.VehicleCountArgs<ExtArgs>
            result: $Utils.Optional<VehicleCountAggregateOutputType> | number
          }
        }
      }
      ServiceCenterProfile: {
        payload: Prisma.$ServiceCenterProfilePayload<ExtArgs>
        fields: Prisma.ServiceCenterProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceCenterProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCenterProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceCenterProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCenterProfilePayload>
          }
          findFirst: {
            args: Prisma.ServiceCenterProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCenterProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceCenterProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCenterProfilePayload>
          }
          findMany: {
            args: Prisma.ServiceCenterProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCenterProfilePayload>[]
          }
          create: {
            args: Prisma.ServiceCenterProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCenterProfilePayload>
          }
          createMany: {
            args: Prisma.ServiceCenterProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceCenterProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCenterProfilePayload>[]
          }
          delete: {
            args: Prisma.ServiceCenterProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCenterProfilePayload>
          }
          update: {
            args: Prisma.ServiceCenterProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCenterProfilePayload>
          }
          deleteMany: {
            args: Prisma.ServiceCenterProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceCenterProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceCenterProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCenterProfilePayload>[]
          }
          upsert: {
            args: Prisma.ServiceCenterProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCenterProfilePayload>
          }
          aggregate: {
            args: Prisma.ServiceCenterProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceCenterProfile>
          }
          groupBy: {
            args: Prisma.ServiceCenterProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceCenterProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCenterProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCenterProfileCountAggregateOutputType> | number
          }
        }
      }
      PartSellerProfile: {
        payload: Prisma.$PartSellerProfilePayload<ExtArgs>
        fields: Prisma.PartSellerProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartSellerProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartSellerProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartSellerProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartSellerProfilePayload>
          }
          findFirst: {
            args: Prisma.PartSellerProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartSellerProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartSellerProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartSellerProfilePayload>
          }
          findMany: {
            args: Prisma.PartSellerProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartSellerProfilePayload>[]
          }
          create: {
            args: Prisma.PartSellerProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartSellerProfilePayload>
          }
          createMany: {
            args: Prisma.PartSellerProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartSellerProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartSellerProfilePayload>[]
          }
          delete: {
            args: Prisma.PartSellerProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartSellerProfilePayload>
          }
          update: {
            args: Prisma.PartSellerProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartSellerProfilePayload>
          }
          deleteMany: {
            args: Prisma.PartSellerProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartSellerProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartSellerProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartSellerProfilePayload>[]
          }
          upsert: {
            args: Prisma.PartSellerProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartSellerProfilePayload>
          }
          aggregate: {
            args: Prisma.PartSellerProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartSellerProfile>
          }
          groupBy: {
            args: Prisma.PartSellerProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartSellerProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartSellerProfileCountArgs<ExtArgs>
            result: $Utils.Optional<PartSellerProfileCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      ServiceType: {
        payload: Prisma.$ServiceTypePayload<ExtArgs>
        fields: Prisma.ServiceTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTypePayload>
          }
          findFirst: {
            args: Prisma.ServiceTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTypePayload>
          }
          findMany: {
            args: Prisma.ServiceTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTypePayload>[]
          }
          create: {
            args: Prisma.ServiceTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTypePayload>
          }
          createMany: {
            args: Prisma.ServiceTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTypePayload>[]
          }
          delete: {
            args: Prisma.ServiceTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTypePayload>
          }
          update: {
            args: Prisma.ServiceTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTypePayload>
          }
          deleteMany: {
            args: Prisma.ServiceTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTypePayload>[]
          }
          upsert: {
            args: Prisma.ServiceTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTypePayload>
          }
          aggregate: {
            args: Prisma.ServiceTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceType>
          }
          groupBy: {
            args: Prisma.ServiceTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceTypeCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceTypeCountAggregateOutputType> | number
          }
        }
      }
      ShopService: {
        payload: Prisma.$ShopServicePayload<ExtArgs>
        fields: Prisma.ShopServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShopServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShopServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopServicePayload>
          }
          findFirst: {
            args: Prisma.ShopServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShopServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopServicePayload>
          }
          findMany: {
            args: Prisma.ShopServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopServicePayload>[]
          }
          create: {
            args: Prisma.ShopServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopServicePayload>
          }
          createMany: {
            args: Prisma.ShopServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShopServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopServicePayload>[]
          }
          delete: {
            args: Prisma.ShopServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopServicePayload>
          }
          update: {
            args: Prisma.ShopServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopServicePayload>
          }
          deleteMany: {
            args: Prisma.ShopServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShopServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShopServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopServicePayload>[]
          }
          upsert: {
            args: Prisma.ShopServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopServicePayload>
          }
          aggregate: {
            args: Prisma.ShopServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShopService>
          }
          groupBy: {
            args: Prisma.ShopServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShopServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShopServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ShopServiceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    carOwnerProfile?: CarOwnerProfileOmit
    vehicle?: VehicleOmit
    serviceCenterProfile?: ServiceCenterProfileOmit
    partSellerProfile?: PartSellerProfileOmit
    subscription?: SubscriptionOmit
    serviceType?: ServiceTypeOmit
    shopService?: ShopServiceOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    vehicles: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vehicles?: boolean | UserCountOutputTypeCountVehiclesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleWhereInput
  }


  /**
   * Count Type ServiceCenterProfileCountOutputType
   */

  export type ServiceCenterProfileCountOutputType = {
    shopServices: number
  }

  export type ServiceCenterProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shopServices?: boolean | ServiceCenterProfileCountOutputTypeCountShopServicesArgs
  }

  // Custom InputTypes
  /**
   * ServiceCenterProfileCountOutputType without action
   */
  export type ServiceCenterProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfileCountOutputType
     */
    select?: ServiceCenterProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCenterProfileCountOutputType without action
   */
  export type ServiceCenterProfileCountOutputTypeCountShopServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShopServiceWhereInput
  }


  /**
   * Count Type ServiceTypeCountOutputType
   */

  export type ServiceTypeCountOutputType = {
    shopServices: number
  }

  export type ServiceTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shopServices?: boolean | ServiceTypeCountOutputTypeCountShopServicesArgs
  }

  // Custom InputTypes
  /**
   * ServiceTypeCountOutputType without action
   */
  export type ServiceTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceTypeCountOutputType
     */
    select?: ServiceTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceTypeCountOutputType without action
   */
  export type ServiceTypeCountOutputTypeCountShopServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShopServiceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    phone: string | null
    role: string | null
    isRegistrationComplete: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    phone: string | null
    role: string | null
    isRegistrationComplete: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    phone: number
    role: number
    isRegistrationComplete: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    phone?: true
    role?: true
    isRegistrationComplete?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    phone?: true
    role?: true
    isRegistrationComplete?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    phone?: true
    role?: true
    isRegistrationComplete?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string | null
    name: string | null
    phone: string | null
    role: string
    isRegistrationComplete: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phone?: boolean
    role?: boolean
    isRegistrationComplete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    carOwnerProfile?: boolean | User$carOwnerProfileArgs<ExtArgs>
    serviceCenterProfile?: boolean | User$serviceCenterProfileArgs<ExtArgs>
    partSellerProfile?: boolean | User$partSellerProfileArgs<ExtArgs>
    vehicles?: boolean | User$vehiclesArgs<ExtArgs>
    subscription?: boolean | User$subscriptionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phone?: boolean
    role?: boolean
    isRegistrationComplete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phone?: boolean
    role?: boolean
    isRegistrationComplete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phone?: boolean
    role?: boolean
    isRegistrationComplete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "phone" | "role" | "isRegistrationComplete" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carOwnerProfile?: boolean | User$carOwnerProfileArgs<ExtArgs>
    serviceCenterProfile?: boolean | User$serviceCenterProfileArgs<ExtArgs>
    partSellerProfile?: boolean | User$partSellerProfileArgs<ExtArgs>
    vehicles?: boolean | User$vehiclesArgs<ExtArgs>
    subscription?: boolean | User$subscriptionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      carOwnerProfile: Prisma.$CarOwnerProfilePayload<ExtArgs> | null
      serviceCenterProfile: Prisma.$ServiceCenterProfilePayload<ExtArgs> | null
      partSellerProfile: Prisma.$PartSellerProfilePayload<ExtArgs> | null
      vehicles: Prisma.$VehiclePayload<ExtArgs>[]
      subscription: Prisma.$SubscriptionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string | null
      name: string | null
      phone: string | null
      role: string
      isRegistrationComplete: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    carOwnerProfile<T extends User$carOwnerProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$carOwnerProfileArgs<ExtArgs>>): Prisma__CarOwnerProfileClient<$Result.GetResult<Prisma.$CarOwnerProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    serviceCenterProfile<T extends User$serviceCenterProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$serviceCenterProfileArgs<ExtArgs>>): Prisma__ServiceCenterProfileClient<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    partSellerProfile<T extends User$partSellerProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$partSellerProfileArgs<ExtArgs>>): Prisma__PartSellerProfileClient<$Result.GetResult<Prisma.$PartSellerProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    vehicles<T extends User$vehiclesArgs<ExtArgs> = {}>(args?: Subset<T, User$vehiclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subscription<T extends User$subscriptionArgs<ExtArgs> = {}>(args?: Subset<T, User$subscriptionArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly isRegistrationComplete: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.carOwnerProfile
   */
  export type User$carOwnerProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileInclude<ExtArgs> | null
    where?: CarOwnerProfileWhereInput
  }

  /**
   * User.serviceCenterProfile
   */
  export type User$serviceCenterProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileInclude<ExtArgs> | null
    where?: ServiceCenterProfileWhereInput
  }

  /**
   * User.partSellerProfile
   */
  export type User$partSellerProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileInclude<ExtArgs> | null
    where?: PartSellerProfileWhereInput
  }

  /**
   * User.vehicles
   */
  export type User$vehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    where?: VehicleWhereInput
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    cursor?: VehicleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * User.subscription
   */
  export type User$subscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model CarOwnerProfile
   */

  export type AggregateCarOwnerProfile = {
    _count: CarOwnerProfileCountAggregateOutputType | null
    _avg: CarOwnerProfileAvgAggregateOutputType | null
    _sum: CarOwnerProfileSumAggregateOutputType | null
    _min: CarOwnerProfileMinAggregateOutputType | null
    _max: CarOwnerProfileMaxAggregateOutputType | null
  }

  export type CarOwnerProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CarOwnerProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CarOwnerProfileMinAggregateOutputType = {
    id: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarOwnerProfileMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarOwnerProfileCountAggregateOutputType = {
    id: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CarOwnerProfileAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CarOwnerProfileSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CarOwnerProfileMinAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarOwnerProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarOwnerProfileCountAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CarOwnerProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarOwnerProfile to aggregate.
     */
    where?: CarOwnerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarOwnerProfiles to fetch.
     */
    orderBy?: CarOwnerProfileOrderByWithRelationInput | CarOwnerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarOwnerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarOwnerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarOwnerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CarOwnerProfiles
    **/
    _count?: true | CarOwnerProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarOwnerProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarOwnerProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarOwnerProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarOwnerProfileMaxAggregateInputType
  }

  export type GetCarOwnerProfileAggregateType<T extends CarOwnerProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateCarOwnerProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarOwnerProfile[P]>
      : GetScalarType<T[P], AggregateCarOwnerProfile[P]>
  }




  export type CarOwnerProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarOwnerProfileWhereInput
    orderBy?: CarOwnerProfileOrderByWithAggregationInput | CarOwnerProfileOrderByWithAggregationInput[]
    by: CarOwnerProfileScalarFieldEnum[] | CarOwnerProfileScalarFieldEnum
    having?: CarOwnerProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarOwnerProfileCountAggregateInputType | true
    _avg?: CarOwnerProfileAvgAggregateInputType
    _sum?: CarOwnerProfileSumAggregateInputType
    _min?: CarOwnerProfileMinAggregateInputType
    _max?: CarOwnerProfileMaxAggregateInputType
  }

  export type CarOwnerProfileGroupByOutputType = {
    id: number
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: CarOwnerProfileCountAggregateOutputType | null
    _avg: CarOwnerProfileAvgAggregateOutputType | null
    _sum: CarOwnerProfileSumAggregateOutputType | null
    _min: CarOwnerProfileMinAggregateOutputType | null
    _max: CarOwnerProfileMaxAggregateOutputType | null
  }

  type GetCarOwnerProfileGroupByPayload<T extends CarOwnerProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarOwnerProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarOwnerProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarOwnerProfileGroupByOutputType[P]>
            : GetScalarType<T[P], CarOwnerProfileGroupByOutputType[P]>
        }
      >
    >


  export type CarOwnerProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carOwnerProfile"]>

  export type CarOwnerProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carOwnerProfile"]>

  export type CarOwnerProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carOwnerProfile"]>

  export type CarOwnerProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CarOwnerProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["carOwnerProfile"]>
  export type CarOwnerProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CarOwnerProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CarOwnerProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CarOwnerProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CarOwnerProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["carOwnerProfile"]>
    composites: {}
  }

  type CarOwnerProfileGetPayload<S extends boolean | null | undefined | CarOwnerProfileDefaultArgs> = $Result.GetResult<Prisma.$CarOwnerProfilePayload, S>

  type CarOwnerProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CarOwnerProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CarOwnerProfileCountAggregateInputType | true
    }

  export interface CarOwnerProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CarOwnerProfile'], meta: { name: 'CarOwnerProfile' } }
    /**
     * Find zero or one CarOwnerProfile that matches the filter.
     * @param {CarOwnerProfileFindUniqueArgs} args - Arguments to find a CarOwnerProfile
     * @example
     * // Get one CarOwnerProfile
     * const carOwnerProfile = await prisma.carOwnerProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CarOwnerProfileFindUniqueArgs>(args: SelectSubset<T, CarOwnerProfileFindUniqueArgs<ExtArgs>>): Prisma__CarOwnerProfileClient<$Result.GetResult<Prisma.$CarOwnerProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CarOwnerProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CarOwnerProfileFindUniqueOrThrowArgs} args - Arguments to find a CarOwnerProfile
     * @example
     * // Get one CarOwnerProfile
     * const carOwnerProfile = await prisma.carOwnerProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CarOwnerProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, CarOwnerProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CarOwnerProfileClient<$Result.GetResult<Prisma.$CarOwnerProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CarOwnerProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarOwnerProfileFindFirstArgs} args - Arguments to find a CarOwnerProfile
     * @example
     * // Get one CarOwnerProfile
     * const carOwnerProfile = await prisma.carOwnerProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CarOwnerProfileFindFirstArgs>(args?: SelectSubset<T, CarOwnerProfileFindFirstArgs<ExtArgs>>): Prisma__CarOwnerProfileClient<$Result.GetResult<Prisma.$CarOwnerProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CarOwnerProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarOwnerProfileFindFirstOrThrowArgs} args - Arguments to find a CarOwnerProfile
     * @example
     * // Get one CarOwnerProfile
     * const carOwnerProfile = await prisma.carOwnerProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CarOwnerProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, CarOwnerProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__CarOwnerProfileClient<$Result.GetResult<Prisma.$CarOwnerProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CarOwnerProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarOwnerProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarOwnerProfiles
     * const carOwnerProfiles = await prisma.carOwnerProfile.findMany()
     * 
     * // Get first 10 CarOwnerProfiles
     * const carOwnerProfiles = await prisma.carOwnerProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carOwnerProfileWithIdOnly = await prisma.carOwnerProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CarOwnerProfileFindManyArgs>(args?: SelectSubset<T, CarOwnerProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarOwnerProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CarOwnerProfile.
     * @param {CarOwnerProfileCreateArgs} args - Arguments to create a CarOwnerProfile.
     * @example
     * // Create one CarOwnerProfile
     * const CarOwnerProfile = await prisma.carOwnerProfile.create({
     *   data: {
     *     // ... data to create a CarOwnerProfile
     *   }
     * })
     * 
     */
    create<T extends CarOwnerProfileCreateArgs>(args: SelectSubset<T, CarOwnerProfileCreateArgs<ExtArgs>>): Prisma__CarOwnerProfileClient<$Result.GetResult<Prisma.$CarOwnerProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CarOwnerProfiles.
     * @param {CarOwnerProfileCreateManyArgs} args - Arguments to create many CarOwnerProfiles.
     * @example
     * // Create many CarOwnerProfiles
     * const carOwnerProfile = await prisma.carOwnerProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CarOwnerProfileCreateManyArgs>(args?: SelectSubset<T, CarOwnerProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CarOwnerProfiles and returns the data saved in the database.
     * @param {CarOwnerProfileCreateManyAndReturnArgs} args - Arguments to create many CarOwnerProfiles.
     * @example
     * // Create many CarOwnerProfiles
     * const carOwnerProfile = await prisma.carOwnerProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CarOwnerProfiles and only return the `id`
     * const carOwnerProfileWithIdOnly = await prisma.carOwnerProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CarOwnerProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, CarOwnerProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarOwnerProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CarOwnerProfile.
     * @param {CarOwnerProfileDeleteArgs} args - Arguments to delete one CarOwnerProfile.
     * @example
     * // Delete one CarOwnerProfile
     * const CarOwnerProfile = await prisma.carOwnerProfile.delete({
     *   where: {
     *     // ... filter to delete one CarOwnerProfile
     *   }
     * })
     * 
     */
    delete<T extends CarOwnerProfileDeleteArgs>(args: SelectSubset<T, CarOwnerProfileDeleteArgs<ExtArgs>>): Prisma__CarOwnerProfileClient<$Result.GetResult<Prisma.$CarOwnerProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CarOwnerProfile.
     * @param {CarOwnerProfileUpdateArgs} args - Arguments to update one CarOwnerProfile.
     * @example
     * // Update one CarOwnerProfile
     * const carOwnerProfile = await prisma.carOwnerProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CarOwnerProfileUpdateArgs>(args: SelectSubset<T, CarOwnerProfileUpdateArgs<ExtArgs>>): Prisma__CarOwnerProfileClient<$Result.GetResult<Prisma.$CarOwnerProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CarOwnerProfiles.
     * @param {CarOwnerProfileDeleteManyArgs} args - Arguments to filter CarOwnerProfiles to delete.
     * @example
     * // Delete a few CarOwnerProfiles
     * const { count } = await prisma.carOwnerProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CarOwnerProfileDeleteManyArgs>(args?: SelectSubset<T, CarOwnerProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarOwnerProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarOwnerProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarOwnerProfiles
     * const carOwnerProfile = await prisma.carOwnerProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CarOwnerProfileUpdateManyArgs>(args: SelectSubset<T, CarOwnerProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarOwnerProfiles and returns the data updated in the database.
     * @param {CarOwnerProfileUpdateManyAndReturnArgs} args - Arguments to update many CarOwnerProfiles.
     * @example
     * // Update many CarOwnerProfiles
     * const carOwnerProfile = await prisma.carOwnerProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CarOwnerProfiles and only return the `id`
     * const carOwnerProfileWithIdOnly = await prisma.carOwnerProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CarOwnerProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, CarOwnerProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarOwnerProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CarOwnerProfile.
     * @param {CarOwnerProfileUpsertArgs} args - Arguments to update or create a CarOwnerProfile.
     * @example
     * // Update or create a CarOwnerProfile
     * const carOwnerProfile = await prisma.carOwnerProfile.upsert({
     *   create: {
     *     // ... data to create a CarOwnerProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarOwnerProfile we want to update
     *   }
     * })
     */
    upsert<T extends CarOwnerProfileUpsertArgs>(args: SelectSubset<T, CarOwnerProfileUpsertArgs<ExtArgs>>): Prisma__CarOwnerProfileClient<$Result.GetResult<Prisma.$CarOwnerProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CarOwnerProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarOwnerProfileCountArgs} args - Arguments to filter CarOwnerProfiles to count.
     * @example
     * // Count the number of CarOwnerProfiles
     * const count = await prisma.carOwnerProfile.count({
     *   where: {
     *     // ... the filter for the CarOwnerProfiles we want to count
     *   }
     * })
    **/
    count<T extends CarOwnerProfileCountArgs>(
      args?: Subset<T, CarOwnerProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarOwnerProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarOwnerProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarOwnerProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarOwnerProfileAggregateArgs>(args: Subset<T, CarOwnerProfileAggregateArgs>): Prisma.PrismaPromise<GetCarOwnerProfileAggregateType<T>>

    /**
     * Group by CarOwnerProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarOwnerProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarOwnerProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarOwnerProfileGroupByArgs['orderBy'] }
        : { orderBy?: CarOwnerProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarOwnerProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarOwnerProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CarOwnerProfile model
   */
  readonly fields: CarOwnerProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CarOwnerProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarOwnerProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CarOwnerProfile model
   */
  interface CarOwnerProfileFieldRefs {
    readonly id: FieldRef<"CarOwnerProfile", 'Int'>
    readonly userId: FieldRef<"CarOwnerProfile", 'Int'>
    readonly createdAt: FieldRef<"CarOwnerProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"CarOwnerProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CarOwnerProfile findUnique
   */
  export type CarOwnerProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileInclude<ExtArgs> | null
    /**
     * Filter, which CarOwnerProfile to fetch.
     */
    where: CarOwnerProfileWhereUniqueInput
  }

  /**
   * CarOwnerProfile findUniqueOrThrow
   */
  export type CarOwnerProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileInclude<ExtArgs> | null
    /**
     * Filter, which CarOwnerProfile to fetch.
     */
    where: CarOwnerProfileWhereUniqueInput
  }

  /**
   * CarOwnerProfile findFirst
   */
  export type CarOwnerProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileInclude<ExtArgs> | null
    /**
     * Filter, which CarOwnerProfile to fetch.
     */
    where?: CarOwnerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarOwnerProfiles to fetch.
     */
    orderBy?: CarOwnerProfileOrderByWithRelationInput | CarOwnerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarOwnerProfiles.
     */
    cursor?: CarOwnerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarOwnerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarOwnerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarOwnerProfiles.
     */
    distinct?: CarOwnerProfileScalarFieldEnum | CarOwnerProfileScalarFieldEnum[]
  }

  /**
   * CarOwnerProfile findFirstOrThrow
   */
  export type CarOwnerProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileInclude<ExtArgs> | null
    /**
     * Filter, which CarOwnerProfile to fetch.
     */
    where?: CarOwnerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarOwnerProfiles to fetch.
     */
    orderBy?: CarOwnerProfileOrderByWithRelationInput | CarOwnerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarOwnerProfiles.
     */
    cursor?: CarOwnerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarOwnerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarOwnerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarOwnerProfiles.
     */
    distinct?: CarOwnerProfileScalarFieldEnum | CarOwnerProfileScalarFieldEnum[]
  }

  /**
   * CarOwnerProfile findMany
   */
  export type CarOwnerProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileInclude<ExtArgs> | null
    /**
     * Filter, which CarOwnerProfiles to fetch.
     */
    where?: CarOwnerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarOwnerProfiles to fetch.
     */
    orderBy?: CarOwnerProfileOrderByWithRelationInput | CarOwnerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CarOwnerProfiles.
     */
    cursor?: CarOwnerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarOwnerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarOwnerProfiles.
     */
    skip?: number
    distinct?: CarOwnerProfileScalarFieldEnum | CarOwnerProfileScalarFieldEnum[]
  }

  /**
   * CarOwnerProfile create
   */
  export type CarOwnerProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a CarOwnerProfile.
     */
    data: XOR<CarOwnerProfileCreateInput, CarOwnerProfileUncheckedCreateInput>
  }

  /**
   * CarOwnerProfile createMany
   */
  export type CarOwnerProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CarOwnerProfiles.
     */
    data: CarOwnerProfileCreateManyInput | CarOwnerProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CarOwnerProfile createManyAndReturn
   */
  export type CarOwnerProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * The data used to create many CarOwnerProfiles.
     */
    data: CarOwnerProfileCreateManyInput | CarOwnerProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CarOwnerProfile update
   */
  export type CarOwnerProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a CarOwnerProfile.
     */
    data: XOR<CarOwnerProfileUpdateInput, CarOwnerProfileUncheckedUpdateInput>
    /**
     * Choose, which CarOwnerProfile to update.
     */
    where: CarOwnerProfileWhereUniqueInput
  }

  /**
   * CarOwnerProfile updateMany
   */
  export type CarOwnerProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CarOwnerProfiles.
     */
    data: XOR<CarOwnerProfileUpdateManyMutationInput, CarOwnerProfileUncheckedUpdateManyInput>
    /**
     * Filter which CarOwnerProfiles to update
     */
    where?: CarOwnerProfileWhereInput
    /**
     * Limit how many CarOwnerProfiles to update.
     */
    limit?: number
  }

  /**
   * CarOwnerProfile updateManyAndReturn
   */
  export type CarOwnerProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * The data used to update CarOwnerProfiles.
     */
    data: XOR<CarOwnerProfileUpdateManyMutationInput, CarOwnerProfileUncheckedUpdateManyInput>
    /**
     * Filter which CarOwnerProfiles to update
     */
    where?: CarOwnerProfileWhereInput
    /**
     * Limit how many CarOwnerProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CarOwnerProfile upsert
   */
  export type CarOwnerProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the CarOwnerProfile to update in case it exists.
     */
    where: CarOwnerProfileWhereUniqueInput
    /**
     * In case the CarOwnerProfile found by the `where` argument doesn't exist, create a new CarOwnerProfile with this data.
     */
    create: XOR<CarOwnerProfileCreateInput, CarOwnerProfileUncheckedCreateInput>
    /**
     * In case the CarOwnerProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarOwnerProfileUpdateInput, CarOwnerProfileUncheckedUpdateInput>
  }

  /**
   * CarOwnerProfile delete
   */
  export type CarOwnerProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileInclude<ExtArgs> | null
    /**
     * Filter which CarOwnerProfile to delete.
     */
    where: CarOwnerProfileWhereUniqueInput
  }

  /**
   * CarOwnerProfile deleteMany
   */
  export type CarOwnerProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarOwnerProfiles to delete
     */
    where?: CarOwnerProfileWhereInput
    /**
     * Limit how many CarOwnerProfiles to delete.
     */
    limit?: number
  }

  /**
   * CarOwnerProfile without action
   */
  export type CarOwnerProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarOwnerProfile
     */
    select?: CarOwnerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarOwnerProfile
     */
    omit?: CarOwnerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarOwnerProfileInclude<ExtArgs> | null
  }


  /**
   * Model Vehicle
   */

  export type AggregateVehicle = {
    _count: VehicleCountAggregateOutputType | null
    _avg: VehicleAvgAggregateOutputType | null
    _sum: VehicleSumAggregateOutputType | null
    _min: VehicleMinAggregateOutputType | null
    _max: VehicleMaxAggregateOutputType | null
  }

  export type VehicleAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    year: number | null
  }

  export type VehicleSumAggregateOutputType = {
    id: number | null
    userId: number | null
    year: number | null
  }

  export type VehicleMinAggregateOutputType = {
    id: number | null
    userId: number | null
    vehicleName: string | null
    model: string | null
    year: number | null
    licensePlate: string | null
    color: string | null
    vehicleType: string | null
    isPrimary: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VehicleMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    vehicleName: string | null
    model: string | null
    year: number | null
    licensePlate: string | null
    color: string | null
    vehicleType: string | null
    isPrimary: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VehicleCountAggregateOutputType = {
    id: number
    userId: number
    vehicleName: number
    model: number
    year: number
    licensePlate: number
    color: number
    vehicleType: number
    isPrimary: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VehicleAvgAggregateInputType = {
    id?: true
    userId?: true
    year?: true
  }

  export type VehicleSumAggregateInputType = {
    id?: true
    userId?: true
    year?: true
  }

  export type VehicleMinAggregateInputType = {
    id?: true
    userId?: true
    vehicleName?: true
    model?: true
    year?: true
    licensePlate?: true
    color?: true
    vehicleType?: true
    isPrimary?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VehicleMaxAggregateInputType = {
    id?: true
    userId?: true
    vehicleName?: true
    model?: true
    year?: true
    licensePlate?: true
    color?: true
    vehicleType?: true
    isPrimary?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VehicleCountAggregateInputType = {
    id?: true
    userId?: true
    vehicleName?: true
    model?: true
    year?: true
    licensePlate?: true
    color?: true
    vehicleType?: true
    isPrimary?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VehicleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vehicle to aggregate.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vehicles
    **/
    _count?: true | VehicleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VehicleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VehicleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VehicleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VehicleMaxAggregateInputType
  }

  export type GetVehicleAggregateType<T extends VehicleAggregateArgs> = {
        [P in keyof T & keyof AggregateVehicle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVehicle[P]>
      : GetScalarType<T[P], AggregateVehicle[P]>
  }




  export type VehicleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleWhereInput
    orderBy?: VehicleOrderByWithAggregationInput | VehicleOrderByWithAggregationInput[]
    by: VehicleScalarFieldEnum[] | VehicleScalarFieldEnum
    having?: VehicleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VehicleCountAggregateInputType | true
    _avg?: VehicleAvgAggregateInputType
    _sum?: VehicleSumAggregateInputType
    _min?: VehicleMinAggregateInputType
    _max?: VehicleMaxAggregateInputType
  }

  export type VehicleGroupByOutputType = {
    id: number
    userId: number
    vehicleName: string
    model: string
    year: number
    licensePlate: string
    color: string
    vehicleType: string
    isPrimary: boolean
    createdAt: Date
    updatedAt: Date
    _count: VehicleCountAggregateOutputType | null
    _avg: VehicleAvgAggregateOutputType | null
    _sum: VehicleSumAggregateOutputType | null
    _min: VehicleMinAggregateOutputType | null
    _max: VehicleMaxAggregateOutputType | null
  }

  type GetVehicleGroupByPayload<T extends VehicleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VehicleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VehicleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VehicleGroupByOutputType[P]>
            : GetScalarType<T[P], VehicleGroupByOutputType[P]>
        }
      >
    >


  export type VehicleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    vehicleName?: boolean
    model?: boolean
    year?: boolean
    licensePlate?: boolean
    color?: boolean
    vehicleType?: boolean
    isPrimary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicle"]>

  export type VehicleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    vehicleName?: boolean
    model?: boolean
    year?: boolean
    licensePlate?: boolean
    color?: boolean
    vehicleType?: boolean
    isPrimary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicle"]>

  export type VehicleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    vehicleName?: boolean
    model?: boolean
    year?: boolean
    licensePlate?: boolean
    color?: boolean
    vehicleType?: boolean
    isPrimary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicle"]>

  export type VehicleSelectScalar = {
    id?: boolean
    userId?: boolean
    vehicleName?: boolean
    model?: boolean
    year?: boolean
    licensePlate?: boolean
    color?: boolean
    vehicleType?: boolean
    isPrimary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VehicleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "vehicleName" | "model" | "year" | "licensePlate" | "color" | "vehicleType" | "isPrimary" | "createdAt" | "updatedAt", ExtArgs["result"]["vehicle"]>
  export type VehicleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VehicleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VehicleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VehiclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vehicle"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      vehicleName: string
      model: string
      year: number
      licensePlate: string
      color: string
      vehicleType: string
      isPrimary: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vehicle"]>
    composites: {}
  }

  type VehicleGetPayload<S extends boolean | null | undefined | VehicleDefaultArgs> = $Result.GetResult<Prisma.$VehiclePayload, S>

  type VehicleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VehicleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VehicleCountAggregateInputType | true
    }

  export interface VehicleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vehicle'], meta: { name: 'Vehicle' } }
    /**
     * Find zero or one Vehicle that matches the filter.
     * @param {VehicleFindUniqueArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VehicleFindUniqueArgs>(args: SelectSubset<T, VehicleFindUniqueArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vehicle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VehicleFindUniqueOrThrowArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VehicleFindUniqueOrThrowArgs>(args: SelectSubset<T, VehicleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vehicle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindFirstArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VehicleFindFirstArgs>(args?: SelectSubset<T, VehicleFindFirstArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vehicle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindFirstOrThrowArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VehicleFindFirstOrThrowArgs>(args?: SelectSubset<T, VehicleFindFirstOrThrowArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vehicles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vehicles
     * const vehicles = await prisma.vehicle.findMany()
     * 
     * // Get first 10 Vehicles
     * const vehicles = await prisma.vehicle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vehicleWithIdOnly = await prisma.vehicle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VehicleFindManyArgs>(args?: SelectSubset<T, VehicleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vehicle.
     * @param {VehicleCreateArgs} args - Arguments to create a Vehicle.
     * @example
     * // Create one Vehicle
     * const Vehicle = await prisma.vehicle.create({
     *   data: {
     *     // ... data to create a Vehicle
     *   }
     * })
     * 
     */
    create<T extends VehicleCreateArgs>(args: SelectSubset<T, VehicleCreateArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vehicles.
     * @param {VehicleCreateManyArgs} args - Arguments to create many Vehicles.
     * @example
     * // Create many Vehicles
     * const vehicle = await prisma.vehicle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VehicleCreateManyArgs>(args?: SelectSubset<T, VehicleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vehicles and returns the data saved in the database.
     * @param {VehicleCreateManyAndReturnArgs} args - Arguments to create many Vehicles.
     * @example
     * // Create many Vehicles
     * const vehicle = await prisma.vehicle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vehicles and only return the `id`
     * const vehicleWithIdOnly = await prisma.vehicle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VehicleCreateManyAndReturnArgs>(args?: SelectSubset<T, VehicleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Vehicle.
     * @param {VehicleDeleteArgs} args - Arguments to delete one Vehicle.
     * @example
     * // Delete one Vehicle
     * const Vehicle = await prisma.vehicle.delete({
     *   where: {
     *     // ... filter to delete one Vehicle
     *   }
     * })
     * 
     */
    delete<T extends VehicleDeleteArgs>(args: SelectSubset<T, VehicleDeleteArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vehicle.
     * @param {VehicleUpdateArgs} args - Arguments to update one Vehicle.
     * @example
     * // Update one Vehicle
     * const vehicle = await prisma.vehicle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VehicleUpdateArgs>(args: SelectSubset<T, VehicleUpdateArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vehicles.
     * @param {VehicleDeleteManyArgs} args - Arguments to filter Vehicles to delete.
     * @example
     * // Delete a few Vehicles
     * const { count } = await prisma.vehicle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VehicleDeleteManyArgs>(args?: SelectSubset<T, VehicleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vehicles
     * const vehicle = await prisma.vehicle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VehicleUpdateManyArgs>(args: SelectSubset<T, VehicleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vehicles and returns the data updated in the database.
     * @param {VehicleUpdateManyAndReturnArgs} args - Arguments to update many Vehicles.
     * @example
     * // Update many Vehicles
     * const vehicle = await prisma.vehicle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Vehicles and only return the `id`
     * const vehicleWithIdOnly = await prisma.vehicle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VehicleUpdateManyAndReturnArgs>(args: SelectSubset<T, VehicleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Vehicle.
     * @param {VehicleUpsertArgs} args - Arguments to update or create a Vehicle.
     * @example
     * // Update or create a Vehicle
     * const vehicle = await prisma.vehicle.upsert({
     *   create: {
     *     // ... data to create a Vehicle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vehicle we want to update
     *   }
     * })
     */
    upsert<T extends VehicleUpsertArgs>(args: SelectSubset<T, VehicleUpsertArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleCountArgs} args - Arguments to filter Vehicles to count.
     * @example
     * // Count the number of Vehicles
     * const count = await prisma.vehicle.count({
     *   where: {
     *     // ... the filter for the Vehicles we want to count
     *   }
     * })
    **/
    count<T extends VehicleCountArgs>(
      args?: Subset<T, VehicleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VehicleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VehicleAggregateArgs>(args: Subset<T, VehicleAggregateArgs>): Prisma.PrismaPromise<GetVehicleAggregateType<T>>

    /**
     * Group by Vehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VehicleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VehicleGroupByArgs['orderBy'] }
        : { orderBy?: VehicleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VehicleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVehicleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vehicle model
   */
  readonly fields: VehicleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vehicle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VehicleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vehicle model
   */
  interface VehicleFieldRefs {
    readonly id: FieldRef<"Vehicle", 'Int'>
    readonly userId: FieldRef<"Vehicle", 'Int'>
    readonly vehicleName: FieldRef<"Vehicle", 'String'>
    readonly model: FieldRef<"Vehicle", 'String'>
    readonly year: FieldRef<"Vehicle", 'Int'>
    readonly licensePlate: FieldRef<"Vehicle", 'String'>
    readonly color: FieldRef<"Vehicle", 'String'>
    readonly vehicleType: FieldRef<"Vehicle", 'String'>
    readonly isPrimary: FieldRef<"Vehicle", 'Boolean'>
    readonly createdAt: FieldRef<"Vehicle", 'DateTime'>
    readonly updatedAt: FieldRef<"Vehicle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vehicle findUnique
   */
  export type VehicleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle findUniqueOrThrow
   */
  export type VehicleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle findFirst
   */
  export type VehicleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vehicles.
     */
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle findFirstOrThrow
   */
  export type VehicleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vehicles.
     */
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle findMany
   */
  export type VehicleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicles to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle create
   */
  export type VehicleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The data needed to create a Vehicle.
     */
    data: XOR<VehicleCreateInput, VehicleUncheckedCreateInput>
  }

  /**
   * Vehicle createMany
   */
  export type VehicleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vehicles.
     */
    data: VehicleCreateManyInput | VehicleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vehicle createManyAndReturn
   */
  export type VehicleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * The data used to create many Vehicles.
     */
    data: VehicleCreateManyInput | VehicleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vehicle update
   */
  export type VehicleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The data needed to update a Vehicle.
     */
    data: XOR<VehicleUpdateInput, VehicleUncheckedUpdateInput>
    /**
     * Choose, which Vehicle to update.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle updateMany
   */
  export type VehicleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vehicles.
     */
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyInput>
    /**
     * Filter which Vehicles to update
     */
    where?: VehicleWhereInput
    /**
     * Limit how many Vehicles to update.
     */
    limit?: number
  }

  /**
   * Vehicle updateManyAndReturn
   */
  export type VehicleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * The data used to update Vehicles.
     */
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyInput>
    /**
     * Filter which Vehicles to update
     */
    where?: VehicleWhereInput
    /**
     * Limit how many Vehicles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vehicle upsert
   */
  export type VehicleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The filter to search for the Vehicle to update in case it exists.
     */
    where: VehicleWhereUniqueInput
    /**
     * In case the Vehicle found by the `where` argument doesn't exist, create a new Vehicle with this data.
     */
    create: XOR<VehicleCreateInput, VehicleUncheckedCreateInput>
    /**
     * In case the Vehicle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VehicleUpdateInput, VehicleUncheckedUpdateInput>
  }

  /**
   * Vehicle delete
   */
  export type VehicleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter which Vehicle to delete.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle deleteMany
   */
  export type VehicleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vehicles to delete
     */
    where?: VehicleWhereInput
    /**
     * Limit how many Vehicles to delete.
     */
    limit?: number
  }

  /**
   * Vehicle without action
   */
  export type VehicleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
  }


  /**
   * Model ServiceCenterProfile
   */

  export type AggregateServiceCenterProfile = {
    _count: ServiceCenterProfileCountAggregateOutputType | null
    _avg: ServiceCenterProfileAvgAggregateOutputType | null
    _sum: ServiceCenterProfileSumAggregateOutputType | null
    _min: ServiceCenterProfileMinAggregateOutputType | null
    _max: ServiceCenterProfileMaxAggregateOutputType | null
  }

  export type ServiceCenterProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ServiceCenterProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ServiceCenterProfileMinAggregateOutputType = {
    id: number | null
    userId: number | null
    businessName: string | null
    address: string | null
    businessRegistrationNumber: string | null
    servicesOffered: string | null
    operatingHours: string | null
    logo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCenterProfileMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    businessName: string | null
    address: string | null
    businessRegistrationNumber: string | null
    servicesOffered: string | null
    operatingHours: string | null
    logo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCenterProfileCountAggregateOutputType = {
    id: number
    userId: number
    businessName: number
    address: number
    businessRegistrationNumber: number
    servicesOffered: number
    operatingHours: number
    logo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceCenterProfileAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ServiceCenterProfileSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ServiceCenterProfileMinAggregateInputType = {
    id?: true
    userId?: true
    businessName?: true
    address?: true
    businessRegistrationNumber?: true
    servicesOffered?: true
    operatingHours?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCenterProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    businessName?: true
    address?: true
    businessRegistrationNumber?: true
    servicesOffered?: true
    operatingHours?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCenterProfileCountAggregateInputType = {
    id?: true
    userId?: true
    businessName?: true
    address?: true
    businessRegistrationNumber?: true
    servicesOffered?: true
    operatingHours?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceCenterProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceCenterProfile to aggregate.
     */
    where?: ServiceCenterProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCenterProfiles to fetch.
     */
    orderBy?: ServiceCenterProfileOrderByWithRelationInput | ServiceCenterProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceCenterProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCenterProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCenterProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceCenterProfiles
    **/
    _count?: true | ServiceCenterProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceCenterProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceCenterProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceCenterProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceCenterProfileMaxAggregateInputType
  }

  export type GetServiceCenterProfileAggregateType<T extends ServiceCenterProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceCenterProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceCenterProfile[P]>
      : GetScalarType<T[P], AggregateServiceCenterProfile[P]>
  }




  export type ServiceCenterProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceCenterProfileWhereInput
    orderBy?: ServiceCenterProfileOrderByWithAggregationInput | ServiceCenterProfileOrderByWithAggregationInput[]
    by: ServiceCenterProfileScalarFieldEnum[] | ServiceCenterProfileScalarFieldEnum
    having?: ServiceCenterProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCenterProfileCountAggregateInputType | true
    _avg?: ServiceCenterProfileAvgAggregateInputType
    _sum?: ServiceCenterProfileSumAggregateInputType
    _min?: ServiceCenterProfileMinAggregateInputType
    _max?: ServiceCenterProfileMaxAggregateInputType
  }

  export type ServiceCenterProfileGroupByOutputType = {
    id: number
    userId: number
    businessName: string
    address: string
    businessRegistrationNumber: string
    servicesOffered: string
    operatingHours: string
    logo: string | null
    createdAt: Date
    updatedAt: Date
    _count: ServiceCenterProfileCountAggregateOutputType | null
    _avg: ServiceCenterProfileAvgAggregateOutputType | null
    _sum: ServiceCenterProfileSumAggregateOutputType | null
    _min: ServiceCenterProfileMinAggregateOutputType | null
    _max: ServiceCenterProfileMaxAggregateOutputType | null
  }

  type GetServiceCenterProfileGroupByPayload<T extends ServiceCenterProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceCenterProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceCenterProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceCenterProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceCenterProfileGroupByOutputType[P]>
        }
      >
    >


  export type ServiceCenterProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    businessName?: boolean
    address?: boolean
    businessRegistrationNumber?: boolean
    servicesOffered?: boolean
    operatingHours?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    shopServices?: boolean | ServiceCenterProfile$shopServicesArgs<ExtArgs>
    _count?: boolean | ServiceCenterProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceCenterProfile"]>

  export type ServiceCenterProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    businessName?: boolean
    address?: boolean
    businessRegistrationNumber?: boolean
    servicesOffered?: boolean
    operatingHours?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceCenterProfile"]>

  export type ServiceCenterProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    businessName?: boolean
    address?: boolean
    businessRegistrationNumber?: boolean
    servicesOffered?: boolean
    operatingHours?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceCenterProfile"]>

  export type ServiceCenterProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    businessName?: boolean
    address?: boolean
    businessRegistrationNumber?: boolean
    servicesOffered?: boolean
    operatingHours?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceCenterProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "businessName" | "address" | "businessRegistrationNumber" | "servicesOffered" | "operatingHours" | "logo" | "createdAt" | "updatedAt", ExtArgs["result"]["serviceCenterProfile"]>
  export type ServiceCenterProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    shopServices?: boolean | ServiceCenterProfile$shopServicesArgs<ExtArgs>
    _count?: boolean | ServiceCenterProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceCenterProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ServiceCenterProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ServiceCenterProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceCenterProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      shopServices: Prisma.$ShopServicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      businessName: string
      address: string
      businessRegistrationNumber: string
      servicesOffered: string
      operatingHours: string
      logo: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["serviceCenterProfile"]>
    composites: {}
  }

  type ServiceCenterProfileGetPayload<S extends boolean | null | undefined | ServiceCenterProfileDefaultArgs> = $Result.GetResult<Prisma.$ServiceCenterProfilePayload, S>

  type ServiceCenterProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceCenterProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCenterProfileCountAggregateInputType | true
    }

  export interface ServiceCenterProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceCenterProfile'], meta: { name: 'ServiceCenterProfile' } }
    /**
     * Find zero or one ServiceCenterProfile that matches the filter.
     * @param {ServiceCenterProfileFindUniqueArgs} args - Arguments to find a ServiceCenterProfile
     * @example
     * // Get one ServiceCenterProfile
     * const serviceCenterProfile = await prisma.serviceCenterProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceCenterProfileFindUniqueArgs>(args: SelectSubset<T, ServiceCenterProfileFindUniqueArgs<ExtArgs>>): Prisma__ServiceCenterProfileClient<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceCenterProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceCenterProfileFindUniqueOrThrowArgs} args - Arguments to find a ServiceCenterProfile
     * @example
     * // Get one ServiceCenterProfile
     * const serviceCenterProfile = await prisma.serviceCenterProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceCenterProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceCenterProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceCenterProfileClient<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceCenterProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCenterProfileFindFirstArgs} args - Arguments to find a ServiceCenterProfile
     * @example
     * // Get one ServiceCenterProfile
     * const serviceCenterProfile = await prisma.serviceCenterProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceCenterProfileFindFirstArgs>(args?: SelectSubset<T, ServiceCenterProfileFindFirstArgs<ExtArgs>>): Prisma__ServiceCenterProfileClient<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceCenterProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCenterProfileFindFirstOrThrowArgs} args - Arguments to find a ServiceCenterProfile
     * @example
     * // Get one ServiceCenterProfile
     * const serviceCenterProfile = await prisma.serviceCenterProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceCenterProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceCenterProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceCenterProfileClient<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceCenterProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCenterProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceCenterProfiles
     * const serviceCenterProfiles = await prisma.serviceCenterProfile.findMany()
     * 
     * // Get first 10 ServiceCenterProfiles
     * const serviceCenterProfiles = await prisma.serviceCenterProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceCenterProfileWithIdOnly = await prisma.serviceCenterProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceCenterProfileFindManyArgs>(args?: SelectSubset<T, ServiceCenterProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceCenterProfile.
     * @param {ServiceCenterProfileCreateArgs} args - Arguments to create a ServiceCenterProfile.
     * @example
     * // Create one ServiceCenterProfile
     * const ServiceCenterProfile = await prisma.serviceCenterProfile.create({
     *   data: {
     *     // ... data to create a ServiceCenterProfile
     *   }
     * })
     * 
     */
    create<T extends ServiceCenterProfileCreateArgs>(args: SelectSubset<T, ServiceCenterProfileCreateArgs<ExtArgs>>): Prisma__ServiceCenterProfileClient<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceCenterProfiles.
     * @param {ServiceCenterProfileCreateManyArgs} args - Arguments to create many ServiceCenterProfiles.
     * @example
     * // Create many ServiceCenterProfiles
     * const serviceCenterProfile = await prisma.serviceCenterProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCenterProfileCreateManyArgs>(args?: SelectSubset<T, ServiceCenterProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceCenterProfiles and returns the data saved in the database.
     * @param {ServiceCenterProfileCreateManyAndReturnArgs} args - Arguments to create many ServiceCenterProfiles.
     * @example
     * // Create many ServiceCenterProfiles
     * const serviceCenterProfile = await prisma.serviceCenterProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceCenterProfiles and only return the `id`
     * const serviceCenterProfileWithIdOnly = await prisma.serviceCenterProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceCenterProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceCenterProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceCenterProfile.
     * @param {ServiceCenterProfileDeleteArgs} args - Arguments to delete one ServiceCenterProfile.
     * @example
     * // Delete one ServiceCenterProfile
     * const ServiceCenterProfile = await prisma.serviceCenterProfile.delete({
     *   where: {
     *     // ... filter to delete one ServiceCenterProfile
     *   }
     * })
     * 
     */
    delete<T extends ServiceCenterProfileDeleteArgs>(args: SelectSubset<T, ServiceCenterProfileDeleteArgs<ExtArgs>>): Prisma__ServiceCenterProfileClient<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceCenterProfile.
     * @param {ServiceCenterProfileUpdateArgs} args - Arguments to update one ServiceCenterProfile.
     * @example
     * // Update one ServiceCenterProfile
     * const serviceCenterProfile = await prisma.serviceCenterProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceCenterProfileUpdateArgs>(args: SelectSubset<T, ServiceCenterProfileUpdateArgs<ExtArgs>>): Prisma__ServiceCenterProfileClient<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceCenterProfiles.
     * @param {ServiceCenterProfileDeleteManyArgs} args - Arguments to filter ServiceCenterProfiles to delete.
     * @example
     * // Delete a few ServiceCenterProfiles
     * const { count } = await prisma.serviceCenterProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceCenterProfileDeleteManyArgs>(args?: SelectSubset<T, ServiceCenterProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceCenterProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCenterProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceCenterProfiles
     * const serviceCenterProfile = await prisma.serviceCenterProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceCenterProfileUpdateManyArgs>(args: SelectSubset<T, ServiceCenterProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceCenterProfiles and returns the data updated in the database.
     * @param {ServiceCenterProfileUpdateManyAndReturnArgs} args - Arguments to update many ServiceCenterProfiles.
     * @example
     * // Update many ServiceCenterProfiles
     * const serviceCenterProfile = await prisma.serviceCenterProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceCenterProfiles and only return the `id`
     * const serviceCenterProfileWithIdOnly = await prisma.serviceCenterProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceCenterProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceCenterProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceCenterProfile.
     * @param {ServiceCenterProfileUpsertArgs} args - Arguments to update or create a ServiceCenterProfile.
     * @example
     * // Update or create a ServiceCenterProfile
     * const serviceCenterProfile = await prisma.serviceCenterProfile.upsert({
     *   create: {
     *     // ... data to create a ServiceCenterProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceCenterProfile we want to update
     *   }
     * })
     */
    upsert<T extends ServiceCenterProfileUpsertArgs>(args: SelectSubset<T, ServiceCenterProfileUpsertArgs<ExtArgs>>): Prisma__ServiceCenterProfileClient<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceCenterProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCenterProfileCountArgs} args - Arguments to filter ServiceCenterProfiles to count.
     * @example
     * // Count the number of ServiceCenterProfiles
     * const count = await prisma.serviceCenterProfile.count({
     *   where: {
     *     // ... the filter for the ServiceCenterProfiles we want to count
     *   }
     * })
    **/
    count<T extends ServiceCenterProfileCountArgs>(
      args?: Subset<T, ServiceCenterProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCenterProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceCenterProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCenterProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceCenterProfileAggregateArgs>(args: Subset<T, ServiceCenterProfileAggregateArgs>): Prisma.PrismaPromise<GetServiceCenterProfileAggregateType<T>>

    /**
     * Group by ServiceCenterProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCenterProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceCenterProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceCenterProfileGroupByArgs['orderBy'] }
        : { orderBy?: ServiceCenterProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceCenterProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceCenterProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceCenterProfile model
   */
  readonly fields: ServiceCenterProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceCenterProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceCenterProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    shopServices<T extends ServiceCenterProfile$shopServicesArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCenterProfile$shopServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceCenterProfile model
   */
  interface ServiceCenterProfileFieldRefs {
    readonly id: FieldRef<"ServiceCenterProfile", 'Int'>
    readonly userId: FieldRef<"ServiceCenterProfile", 'Int'>
    readonly businessName: FieldRef<"ServiceCenterProfile", 'String'>
    readonly address: FieldRef<"ServiceCenterProfile", 'String'>
    readonly businessRegistrationNumber: FieldRef<"ServiceCenterProfile", 'String'>
    readonly servicesOffered: FieldRef<"ServiceCenterProfile", 'String'>
    readonly operatingHours: FieldRef<"ServiceCenterProfile", 'String'>
    readonly logo: FieldRef<"ServiceCenterProfile", 'String'>
    readonly createdAt: FieldRef<"ServiceCenterProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"ServiceCenterProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServiceCenterProfile findUnique
   */
  export type ServiceCenterProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCenterProfile to fetch.
     */
    where: ServiceCenterProfileWhereUniqueInput
  }

  /**
   * ServiceCenterProfile findUniqueOrThrow
   */
  export type ServiceCenterProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCenterProfile to fetch.
     */
    where: ServiceCenterProfileWhereUniqueInput
  }

  /**
   * ServiceCenterProfile findFirst
   */
  export type ServiceCenterProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCenterProfile to fetch.
     */
    where?: ServiceCenterProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCenterProfiles to fetch.
     */
    orderBy?: ServiceCenterProfileOrderByWithRelationInput | ServiceCenterProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceCenterProfiles.
     */
    cursor?: ServiceCenterProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCenterProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCenterProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceCenterProfiles.
     */
    distinct?: ServiceCenterProfileScalarFieldEnum | ServiceCenterProfileScalarFieldEnum[]
  }

  /**
   * ServiceCenterProfile findFirstOrThrow
   */
  export type ServiceCenterProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCenterProfile to fetch.
     */
    where?: ServiceCenterProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCenterProfiles to fetch.
     */
    orderBy?: ServiceCenterProfileOrderByWithRelationInput | ServiceCenterProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceCenterProfiles.
     */
    cursor?: ServiceCenterProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCenterProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCenterProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceCenterProfiles.
     */
    distinct?: ServiceCenterProfileScalarFieldEnum | ServiceCenterProfileScalarFieldEnum[]
  }

  /**
   * ServiceCenterProfile findMany
   */
  export type ServiceCenterProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCenterProfiles to fetch.
     */
    where?: ServiceCenterProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCenterProfiles to fetch.
     */
    orderBy?: ServiceCenterProfileOrderByWithRelationInput | ServiceCenterProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceCenterProfiles.
     */
    cursor?: ServiceCenterProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCenterProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCenterProfiles.
     */
    skip?: number
    distinct?: ServiceCenterProfileScalarFieldEnum | ServiceCenterProfileScalarFieldEnum[]
  }

  /**
   * ServiceCenterProfile create
   */
  export type ServiceCenterProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceCenterProfile.
     */
    data: XOR<ServiceCenterProfileCreateInput, ServiceCenterProfileUncheckedCreateInput>
  }

  /**
   * ServiceCenterProfile createMany
   */
  export type ServiceCenterProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceCenterProfiles.
     */
    data: ServiceCenterProfileCreateManyInput | ServiceCenterProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceCenterProfile createManyAndReturn
   */
  export type ServiceCenterProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceCenterProfiles.
     */
    data: ServiceCenterProfileCreateManyInput | ServiceCenterProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceCenterProfile update
   */
  export type ServiceCenterProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceCenterProfile.
     */
    data: XOR<ServiceCenterProfileUpdateInput, ServiceCenterProfileUncheckedUpdateInput>
    /**
     * Choose, which ServiceCenterProfile to update.
     */
    where: ServiceCenterProfileWhereUniqueInput
  }

  /**
   * ServiceCenterProfile updateMany
   */
  export type ServiceCenterProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceCenterProfiles.
     */
    data: XOR<ServiceCenterProfileUpdateManyMutationInput, ServiceCenterProfileUncheckedUpdateManyInput>
    /**
     * Filter which ServiceCenterProfiles to update
     */
    where?: ServiceCenterProfileWhereInput
    /**
     * Limit how many ServiceCenterProfiles to update.
     */
    limit?: number
  }

  /**
   * ServiceCenterProfile updateManyAndReturn
   */
  export type ServiceCenterProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * The data used to update ServiceCenterProfiles.
     */
    data: XOR<ServiceCenterProfileUpdateManyMutationInput, ServiceCenterProfileUncheckedUpdateManyInput>
    /**
     * Filter which ServiceCenterProfiles to update
     */
    where?: ServiceCenterProfileWhereInput
    /**
     * Limit how many ServiceCenterProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceCenterProfile upsert
   */
  export type ServiceCenterProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceCenterProfile to update in case it exists.
     */
    where: ServiceCenterProfileWhereUniqueInput
    /**
     * In case the ServiceCenterProfile found by the `where` argument doesn't exist, create a new ServiceCenterProfile with this data.
     */
    create: XOR<ServiceCenterProfileCreateInput, ServiceCenterProfileUncheckedCreateInput>
    /**
     * In case the ServiceCenterProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceCenterProfileUpdateInput, ServiceCenterProfileUncheckedUpdateInput>
  }

  /**
   * ServiceCenterProfile delete
   */
  export type ServiceCenterProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileInclude<ExtArgs> | null
    /**
     * Filter which ServiceCenterProfile to delete.
     */
    where: ServiceCenterProfileWhereUniqueInput
  }

  /**
   * ServiceCenterProfile deleteMany
   */
  export type ServiceCenterProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceCenterProfiles to delete
     */
    where?: ServiceCenterProfileWhereInput
    /**
     * Limit how many ServiceCenterProfiles to delete.
     */
    limit?: number
  }

  /**
   * ServiceCenterProfile.shopServices
   */
  export type ServiceCenterProfile$shopServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceInclude<ExtArgs> | null
    where?: ShopServiceWhereInput
    orderBy?: ShopServiceOrderByWithRelationInput | ShopServiceOrderByWithRelationInput[]
    cursor?: ShopServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShopServiceScalarFieldEnum | ShopServiceScalarFieldEnum[]
  }

  /**
   * ServiceCenterProfile without action
   */
  export type ServiceCenterProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCenterProfile
     */
    select?: ServiceCenterProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCenterProfile
     */
    omit?: ServiceCenterProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCenterProfileInclude<ExtArgs> | null
  }


  /**
   * Model PartSellerProfile
   */

  export type AggregatePartSellerProfile = {
    _count: PartSellerProfileCountAggregateOutputType | null
    _avg: PartSellerProfileAvgAggregateOutputType | null
    _sum: PartSellerProfileSumAggregateOutputType | null
    _min: PartSellerProfileMinAggregateOutputType | null
    _max: PartSellerProfileMaxAggregateOutputType | null
  }

  export type PartSellerProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PartSellerProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PartSellerProfileMinAggregateOutputType = {
    id: number | null
    userId: number | null
    shopName: string | null
    address: string | null
    categoriesSold: string | null
    inventoryCapacity: string | null
    contactPersonName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartSellerProfileMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    shopName: string | null
    address: string | null
    categoriesSold: string | null
    inventoryCapacity: string | null
    contactPersonName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartSellerProfileCountAggregateOutputType = {
    id: number
    userId: number
    shopName: number
    address: number
    categoriesSold: number
    inventoryCapacity: number
    contactPersonName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PartSellerProfileAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PartSellerProfileSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PartSellerProfileMinAggregateInputType = {
    id?: true
    userId?: true
    shopName?: true
    address?: true
    categoriesSold?: true
    inventoryCapacity?: true
    contactPersonName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartSellerProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    shopName?: true
    address?: true
    categoriesSold?: true
    inventoryCapacity?: true
    contactPersonName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartSellerProfileCountAggregateInputType = {
    id?: true
    userId?: true
    shopName?: true
    address?: true
    categoriesSold?: true
    inventoryCapacity?: true
    contactPersonName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PartSellerProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartSellerProfile to aggregate.
     */
    where?: PartSellerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartSellerProfiles to fetch.
     */
    orderBy?: PartSellerProfileOrderByWithRelationInput | PartSellerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartSellerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartSellerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartSellerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PartSellerProfiles
    **/
    _count?: true | PartSellerProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartSellerProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartSellerProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartSellerProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartSellerProfileMaxAggregateInputType
  }

  export type GetPartSellerProfileAggregateType<T extends PartSellerProfileAggregateArgs> = {
        [P in keyof T & keyof AggregatePartSellerProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartSellerProfile[P]>
      : GetScalarType<T[P], AggregatePartSellerProfile[P]>
  }




  export type PartSellerProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartSellerProfileWhereInput
    orderBy?: PartSellerProfileOrderByWithAggregationInput | PartSellerProfileOrderByWithAggregationInput[]
    by: PartSellerProfileScalarFieldEnum[] | PartSellerProfileScalarFieldEnum
    having?: PartSellerProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartSellerProfileCountAggregateInputType | true
    _avg?: PartSellerProfileAvgAggregateInputType
    _sum?: PartSellerProfileSumAggregateInputType
    _min?: PartSellerProfileMinAggregateInputType
    _max?: PartSellerProfileMaxAggregateInputType
  }

  export type PartSellerProfileGroupByOutputType = {
    id: number
    userId: number
    shopName: string
    address: string
    categoriesSold: string
    inventoryCapacity: string | null
    contactPersonName: string
    createdAt: Date
    updatedAt: Date
    _count: PartSellerProfileCountAggregateOutputType | null
    _avg: PartSellerProfileAvgAggregateOutputType | null
    _sum: PartSellerProfileSumAggregateOutputType | null
    _min: PartSellerProfileMinAggregateOutputType | null
    _max: PartSellerProfileMaxAggregateOutputType | null
  }

  type GetPartSellerProfileGroupByPayload<T extends PartSellerProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartSellerProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartSellerProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartSellerProfileGroupByOutputType[P]>
            : GetScalarType<T[P], PartSellerProfileGroupByOutputType[P]>
        }
      >
    >


  export type PartSellerProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    shopName?: boolean
    address?: boolean
    categoriesSold?: boolean
    inventoryCapacity?: boolean
    contactPersonName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partSellerProfile"]>

  export type PartSellerProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    shopName?: boolean
    address?: boolean
    categoriesSold?: boolean
    inventoryCapacity?: boolean
    contactPersonName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partSellerProfile"]>

  export type PartSellerProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    shopName?: boolean
    address?: boolean
    categoriesSold?: boolean
    inventoryCapacity?: boolean
    contactPersonName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partSellerProfile"]>

  export type PartSellerProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    shopName?: boolean
    address?: boolean
    categoriesSold?: boolean
    inventoryCapacity?: boolean
    contactPersonName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PartSellerProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "shopName" | "address" | "categoriesSold" | "inventoryCapacity" | "contactPersonName" | "createdAt" | "updatedAt", ExtArgs["result"]["partSellerProfile"]>
  export type PartSellerProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PartSellerProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PartSellerProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PartSellerProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PartSellerProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      shopName: string
      address: string
      categoriesSold: string
      inventoryCapacity: string | null
      contactPersonName: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["partSellerProfile"]>
    composites: {}
  }

  type PartSellerProfileGetPayload<S extends boolean | null | undefined | PartSellerProfileDefaultArgs> = $Result.GetResult<Prisma.$PartSellerProfilePayload, S>

  type PartSellerProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartSellerProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartSellerProfileCountAggregateInputType | true
    }

  export interface PartSellerProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PartSellerProfile'], meta: { name: 'PartSellerProfile' } }
    /**
     * Find zero or one PartSellerProfile that matches the filter.
     * @param {PartSellerProfileFindUniqueArgs} args - Arguments to find a PartSellerProfile
     * @example
     * // Get one PartSellerProfile
     * const partSellerProfile = await prisma.partSellerProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartSellerProfileFindUniqueArgs>(args: SelectSubset<T, PartSellerProfileFindUniqueArgs<ExtArgs>>): Prisma__PartSellerProfileClient<$Result.GetResult<Prisma.$PartSellerProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PartSellerProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartSellerProfileFindUniqueOrThrowArgs} args - Arguments to find a PartSellerProfile
     * @example
     * // Get one PartSellerProfile
     * const partSellerProfile = await prisma.partSellerProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartSellerProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, PartSellerProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartSellerProfileClient<$Result.GetResult<Prisma.$PartSellerProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PartSellerProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartSellerProfileFindFirstArgs} args - Arguments to find a PartSellerProfile
     * @example
     * // Get one PartSellerProfile
     * const partSellerProfile = await prisma.partSellerProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartSellerProfileFindFirstArgs>(args?: SelectSubset<T, PartSellerProfileFindFirstArgs<ExtArgs>>): Prisma__PartSellerProfileClient<$Result.GetResult<Prisma.$PartSellerProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PartSellerProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartSellerProfileFindFirstOrThrowArgs} args - Arguments to find a PartSellerProfile
     * @example
     * // Get one PartSellerProfile
     * const partSellerProfile = await prisma.partSellerProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartSellerProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, PartSellerProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartSellerProfileClient<$Result.GetResult<Prisma.$PartSellerProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PartSellerProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartSellerProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PartSellerProfiles
     * const partSellerProfiles = await prisma.partSellerProfile.findMany()
     * 
     * // Get first 10 PartSellerProfiles
     * const partSellerProfiles = await prisma.partSellerProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partSellerProfileWithIdOnly = await prisma.partSellerProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartSellerProfileFindManyArgs>(args?: SelectSubset<T, PartSellerProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartSellerProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PartSellerProfile.
     * @param {PartSellerProfileCreateArgs} args - Arguments to create a PartSellerProfile.
     * @example
     * // Create one PartSellerProfile
     * const PartSellerProfile = await prisma.partSellerProfile.create({
     *   data: {
     *     // ... data to create a PartSellerProfile
     *   }
     * })
     * 
     */
    create<T extends PartSellerProfileCreateArgs>(args: SelectSubset<T, PartSellerProfileCreateArgs<ExtArgs>>): Prisma__PartSellerProfileClient<$Result.GetResult<Prisma.$PartSellerProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PartSellerProfiles.
     * @param {PartSellerProfileCreateManyArgs} args - Arguments to create many PartSellerProfiles.
     * @example
     * // Create many PartSellerProfiles
     * const partSellerProfile = await prisma.partSellerProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartSellerProfileCreateManyArgs>(args?: SelectSubset<T, PartSellerProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PartSellerProfiles and returns the data saved in the database.
     * @param {PartSellerProfileCreateManyAndReturnArgs} args - Arguments to create many PartSellerProfiles.
     * @example
     * // Create many PartSellerProfiles
     * const partSellerProfile = await prisma.partSellerProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PartSellerProfiles and only return the `id`
     * const partSellerProfileWithIdOnly = await prisma.partSellerProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartSellerProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, PartSellerProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartSellerProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PartSellerProfile.
     * @param {PartSellerProfileDeleteArgs} args - Arguments to delete one PartSellerProfile.
     * @example
     * // Delete one PartSellerProfile
     * const PartSellerProfile = await prisma.partSellerProfile.delete({
     *   where: {
     *     // ... filter to delete one PartSellerProfile
     *   }
     * })
     * 
     */
    delete<T extends PartSellerProfileDeleteArgs>(args: SelectSubset<T, PartSellerProfileDeleteArgs<ExtArgs>>): Prisma__PartSellerProfileClient<$Result.GetResult<Prisma.$PartSellerProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PartSellerProfile.
     * @param {PartSellerProfileUpdateArgs} args - Arguments to update one PartSellerProfile.
     * @example
     * // Update one PartSellerProfile
     * const partSellerProfile = await prisma.partSellerProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartSellerProfileUpdateArgs>(args: SelectSubset<T, PartSellerProfileUpdateArgs<ExtArgs>>): Prisma__PartSellerProfileClient<$Result.GetResult<Prisma.$PartSellerProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PartSellerProfiles.
     * @param {PartSellerProfileDeleteManyArgs} args - Arguments to filter PartSellerProfiles to delete.
     * @example
     * // Delete a few PartSellerProfiles
     * const { count } = await prisma.partSellerProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartSellerProfileDeleteManyArgs>(args?: SelectSubset<T, PartSellerProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PartSellerProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartSellerProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PartSellerProfiles
     * const partSellerProfile = await prisma.partSellerProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartSellerProfileUpdateManyArgs>(args: SelectSubset<T, PartSellerProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PartSellerProfiles and returns the data updated in the database.
     * @param {PartSellerProfileUpdateManyAndReturnArgs} args - Arguments to update many PartSellerProfiles.
     * @example
     * // Update many PartSellerProfiles
     * const partSellerProfile = await prisma.partSellerProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PartSellerProfiles and only return the `id`
     * const partSellerProfileWithIdOnly = await prisma.partSellerProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartSellerProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, PartSellerProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartSellerProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PartSellerProfile.
     * @param {PartSellerProfileUpsertArgs} args - Arguments to update or create a PartSellerProfile.
     * @example
     * // Update or create a PartSellerProfile
     * const partSellerProfile = await prisma.partSellerProfile.upsert({
     *   create: {
     *     // ... data to create a PartSellerProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PartSellerProfile we want to update
     *   }
     * })
     */
    upsert<T extends PartSellerProfileUpsertArgs>(args: SelectSubset<T, PartSellerProfileUpsertArgs<ExtArgs>>): Prisma__PartSellerProfileClient<$Result.GetResult<Prisma.$PartSellerProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PartSellerProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartSellerProfileCountArgs} args - Arguments to filter PartSellerProfiles to count.
     * @example
     * // Count the number of PartSellerProfiles
     * const count = await prisma.partSellerProfile.count({
     *   where: {
     *     // ... the filter for the PartSellerProfiles we want to count
     *   }
     * })
    **/
    count<T extends PartSellerProfileCountArgs>(
      args?: Subset<T, PartSellerProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartSellerProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PartSellerProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartSellerProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartSellerProfileAggregateArgs>(args: Subset<T, PartSellerProfileAggregateArgs>): Prisma.PrismaPromise<GetPartSellerProfileAggregateType<T>>

    /**
     * Group by PartSellerProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartSellerProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartSellerProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartSellerProfileGroupByArgs['orderBy'] }
        : { orderBy?: PartSellerProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartSellerProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartSellerProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PartSellerProfile model
   */
  readonly fields: PartSellerProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PartSellerProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartSellerProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PartSellerProfile model
   */
  interface PartSellerProfileFieldRefs {
    readonly id: FieldRef<"PartSellerProfile", 'Int'>
    readonly userId: FieldRef<"PartSellerProfile", 'Int'>
    readonly shopName: FieldRef<"PartSellerProfile", 'String'>
    readonly address: FieldRef<"PartSellerProfile", 'String'>
    readonly categoriesSold: FieldRef<"PartSellerProfile", 'String'>
    readonly inventoryCapacity: FieldRef<"PartSellerProfile", 'String'>
    readonly contactPersonName: FieldRef<"PartSellerProfile", 'String'>
    readonly createdAt: FieldRef<"PartSellerProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"PartSellerProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PartSellerProfile findUnique
   */
  export type PartSellerProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileInclude<ExtArgs> | null
    /**
     * Filter, which PartSellerProfile to fetch.
     */
    where: PartSellerProfileWhereUniqueInput
  }

  /**
   * PartSellerProfile findUniqueOrThrow
   */
  export type PartSellerProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileInclude<ExtArgs> | null
    /**
     * Filter, which PartSellerProfile to fetch.
     */
    where: PartSellerProfileWhereUniqueInput
  }

  /**
   * PartSellerProfile findFirst
   */
  export type PartSellerProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileInclude<ExtArgs> | null
    /**
     * Filter, which PartSellerProfile to fetch.
     */
    where?: PartSellerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartSellerProfiles to fetch.
     */
    orderBy?: PartSellerProfileOrderByWithRelationInput | PartSellerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartSellerProfiles.
     */
    cursor?: PartSellerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartSellerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartSellerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartSellerProfiles.
     */
    distinct?: PartSellerProfileScalarFieldEnum | PartSellerProfileScalarFieldEnum[]
  }

  /**
   * PartSellerProfile findFirstOrThrow
   */
  export type PartSellerProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileInclude<ExtArgs> | null
    /**
     * Filter, which PartSellerProfile to fetch.
     */
    where?: PartSellerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartSellerProfiles to fetch.
     */
    orderBy?: PartSellerProfileOrderByWithRelationInput | PartSellerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartSellerProfiles.
     */
    cursor?: PartSellerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartSellerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartSellerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartSellerProfiles.
     */
    distinct?: PartSellerProfileScalarFieldEnum | PartSellerProfileScalarFieldEnum[]
  }

  /**
   * PartSellerProfile findMany
   */
  export type PartSellerProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileInclude<ExtArgs> | null
    /**
     * Filter, which PartSellerProfiles to fetch.
     */
    where?: PartSellerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartSellerProfiles to fetch.
     */
    orderBy?: PartSellerProfileOrderByWithRelationInput | PartSellerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PartSellerProfiles.
     */
    cursor?: PartSellerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartSellerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartSellerProfiles.
     */
    skip?: number
    distinct?: PartSellerProfileScalarFieldEnum | PartSellerProfileScalarFieldEnum[]
  }

  /**
   * PartSellerProfile create
   */
  export type PartSellerProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a PartSellerProfile.
     */
    data: XOR<PartSellerProfileCreateInput, PartSellerProfileUncheckedCreateInput>
  }

  /**
   * PartSellerProfile createMany
   */
  export type PartSellerProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PartSellerProfiles.
     */
    data: PartSellerProfileCreateManyInput | PartSellerProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PartSellerProfile createManyAndReturn
   */
  export type PartSellerProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * The data used to create many PartSellerProfiles.
     */
    data: PartSellerProfileCreateManyInput | PartSellerProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PartSellerProfile update
   */
  export type PartSellerProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a PartSellerProfile.
     */
    data: XOR<PartSellerProfileUpdateInput, PartSellerProfileUncheckedUpdateInput>
    /**
     * Choose, which PartSellerProfile to update.
     */
    where: PartSellerProfileWhereUniqueInput
  }

  /**
   * PartSellerProfile updateMany
   */
  export type PartSellerProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PartSellerProfiles.
     */
    data: XOR<PartSellerProfileUpdateManyMutationInput, PartSellerProfileUncheckedUpdateManyInput>
    /**
     * Filter which PartSellerProfiles to update
     */
    where?: PartSellerProfileWhereInput
    /**
     * Limit how many PartSellerProfiles to update.
     */
    limit?: number
  }

  /**
   * PartSellerProfile updateManyAndReturn
   */
  export type PartSellerProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * The data used to update PartSellerProfiles.
     */
    data: XOR<PartSellerProfileUpdateManyMutationInput, PartSellerProfileUncheckedUpdateManyInput>
    /**
     * Filter which PartSellerProfiles to update
     */
    where?: PartSellerProfileWhereInput
    /**
     * Limit how many PartSellerProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PartSellerProfile upsert
   */
  export type PartSellerProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the PartSellerProfile to update in case it exists.
     */
    where: PartSellerProfileWhereUniqueInput
    /**
     * In case the PartSellerProfile found by the `where` argument doesn't exist, create a new PartSellerProfile with this data.
     */
    create: XOR<PartSellerProfileCreateInput, PartSellerProfileUncheckedCreateInput>
    /**
     * In case the PartSellerProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartSellerProfileUpdateInput, PartSellerProfileUncheckedUpdateInput>
  }

  /**
   * PartSellerProfile delete
   */
  export type PartSellerProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileInclude<ExtArgs> | null
    /**
     * Filter which PartSellerProfile to delete.
     */
    where: PartSellerProfileWhereUniqueInput
  }

  /**
   * PartSellerProfile deleteMany
   */
  export type PartSellerProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartSellerProfiles to delete
     */
    where?: PartSellerProfileWhereInput
    /**
     * Limit how many PartSellerProfiles to delete.
     */
    limit?: number
  }

  /**
   * PartSellerProfile without action
   */
  export type PartSellerProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartSellerProfile
     */
    select?: PartSellerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PartSellerProfile
     */
    omit?: PartSellerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartSellerProfileInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _avg: SubscriptionAvgAggregateOutputType | null
    _sum: SubscriptionSumAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SubscriptionSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    planType: string | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    paymentData: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    planType: string | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    paymentData: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    userId: number
    planType: number
    status: number
    startDate: number
    endDate: number
    paymentData: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriptionAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SubscriptionSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SubscriptionMinAggregateInputType = {
    id?: true
    userId?: true
    planType?: true
    status?: true
    startDate?: true
    endDate?: true
    paymentData?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    userId?: true
    planType?: true
    status?: true
    startDate?: true
    endDate?: true
    paymentData?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    userId?: true
    planType?: true
    status?: true
    startDate?: true
    endDate?: true
    paymentData?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _avg?: SubscriptionAvgAggregateInputType
    _sum?: SubscriptionSumAggregateInputType
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: number
    userId: number
    planType: string
    status: string
    startDate: Date
    endDate: Date
    paymentData: string
    createdAt: Date
    updatedAt: Date
    _count: SubscriptionCountAggregateOutputType | null
    _avg: SubscriptionAvgAggregateOutputType | null
    _sum: SubscriptionSumAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planType?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    paymentData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planType?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    paymentData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planType?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    paymentData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    userId?: boolean
    planType?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    paymentData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "planType" | "status" | "startDate" | "endDate" | "paymentData" | "createdAt" | "updatedAt", ExtArgs["result"]["subscription"]>
  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      planType: string
      status: string
      startDate: Date
      endDate: Date
      paymentData: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions and returns the data updated in the database.
     * @param {SubscriptionUpdateManyAndReturnArgs} args - Arguments to update many Subscriptions.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'Int'>
    readonly userId: FieldRef<"Subscription", 'Int'>
    readonly planType: FieldRef<"Subscription", 'String'>
    readonly status: FieldRef<"Subscription", 'String'>
    readonly startDate: FieldRef<"Subscription", 'DateTime'>
    readonly endDate: FieldRef<"Subscription", 'DateTime'>
    readonly paymentData: FieldRef<"Subscription", 'String'>
    readonly createdAt: FieldRef<"Subscription", 'DateTime'>
    readonly updatedAt: FieldRef<"Subscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription createManyAndReturn
   */
  export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
  }

  /**
   * Subscription updateManyAndReturn
   */
  export type SubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to delete.
     */
    limit?: number
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model ServiceType
   */

  export type AggregateServiceType = {
    _count: ServiceTypeCountAggregateOutputType | null
    _avg: ServiceTypeAvgAggregateOutputType | null
    _sum: ServiceTypeSumAggregateOutputType | null
    _min: ServiceTypeMinAggregateOutputType | null
    _max: ServiceTypeMaxAggregateOutputType | null
  }

  export type ServiceTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type ServiceTypeSumAggregateOutputType = {
    id: number | null
  }

  export type ServiceTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type ServiceTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type ServiceTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type ServiceTypeAvgAggregateInputType = {
    id?: true
  }

  export type ServiceTypeSumAggregateInputType = {
    id?: true
  }

  export type ServiceTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type ServiceTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type ServiceTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type ServiceTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceType to aggregate.
     */
    where?: ServiceTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceTypes to fetch.
     */
    orderBy?: ServiceTypeOrderByWithRelationInput | ServiceTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceTypes
    **/
    _count?: true | ServiceTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceTypeMaxAggregateInputType
  }

  export type GetServiceTypeAggregateType<T extends ServiceTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceType[P]>
      : GetScalarType<T[P], AggregateServiceType[P]>
  }




  export type ServiceTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceTypeWhereInput
    orderBy?: ServiceTypeOrderByWithAggregationInput | ServiceTypeOrderByWithAggregationInput[]
    by: ServiceTypeScalarFieldEnum[] | ServiceTypeScalarFieldEnum
    having?: ServiceTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceTypeCountAggregateInputType | true
    _avg?: ServiceTypeAvgAggregateInputType
    _sum?: ServiceTypeSumAggregateInputType
    _min?: ServiceTypeMinAggregateInputType
    _max?: ServiceTypeMaxAggregateInputType
  }

  export type ServiceTypeGroupByOutputType = {
    id: number
    name: string
    description: string | null
    _count: ServiceTypeCountAggregateOutputType | null
    _avg: ServiceTypeAvgAggregateOutputType | null
    _sum: ServiceTypeSumAggregateOutputType | null
    _min: ServiceTypeMinAggregateOutputType | null
    _max: ServiceTypeMaxAggregateOutputType | null
  }

  type GetServiceTypeGroupByPayload<T extends ServiceTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceTypeGroupByOutputType[P]>
        }
      >
    >


  export type ServiceTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    shopServices?: boolean | ServiceType$shopServicesArgs<ExtArgs>
    _count?: boolean | ServiceTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceType"]>

  export type ServiceTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["serviceType"]>

  export type ServiceTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["serviceType"]>

  export type ServiceTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type ServiceTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description", ExtArgs["result"]["serviceType"]>
  export type ServiceTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shopServices?: boolean | ServiceType$shopServicesArgs<ExtArgs>
    _count?: boolean | ServiceTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ServiceTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ServiceTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceType"
    objects: {
      shopServices: Prisma.$ShopServicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
    }, ExtArgs["result"]["serviceType"]>
    composites: {}
  }

  type ServiceTypeGetPayload<S extends boolean | null | undefined | ServiceTypeDefaultArgs> = $Result.GetResult<Prisma.$ServiceTypePayload, S>

  type ServiceTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceTypeCountAggregateInputType | true
    }

  export interface ServiceTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceType'], meta: { name: 'ServiceType' } }
    /**
     * Find zero or one ServiceType that matches the filter.
     * @param {ServiceTypeFindUniqueArgs} args - Arguments to find a ServiceType
     * @example
     * // Get one ServiceType
     * const serviceType = await prisma.serviceType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceTypeFindUniqueArgs>(args: SelectSubset<T, ServiceTypeFindUniqueArgs<ExtArgs>>): Prisma__ServiceTypeClient<$Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceTypeFindUniqueOrThrowArgs} args - Arguments to find a ServiceType
     * @example
     * // Get one ServiceType
     * const serviceType = await prisma.serviceType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceTypeClient<$Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTypeFindFirstArgs} args - Arguments to find a ServiceType
     * @example
     * // Get one ServiceType
     * const serviceType = await prisma.serviceType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceTypeFindFirstArgs>(args?: SelectSubset<T, ServiceTypeFindFirstArgs<ExtArgs>>): Prisma__ServiceTypeClient<$Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTypeFindFirstOrThrowArgs} args - Arguments to find a ServiceType
     * @example
     * // Get one ServiceType
     * const serviceType = await prisma.serviceType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceTypeClient<$Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceTypes
     * const serviceTypes = await prisma.serviceType.findMany()
     * 
     * // Get first 10 ServiceTypes
     * const serviceTypes = await prisma.serviceType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceTypeWithIdOnly = await prisma.serviceType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceTypeFindManyArgs>(args?: SelectSubset<T, ServiceTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceType.
     * @param {ServiceTypeCreateArgs} args - Arguments to create a ServiceType.
     * @example
     * // Create one ServiceType
     * const ServiceType = await prisma.serviceType.create({
     *   data: {
     *     // ... data to create a ServiceType
     *   }
     * })
     * 
     */
    create<T extends ServiceTypeCreateArgs>(args: SelectSubset<T, ServiceTypeCreateArgs<ExtArgs>>): Prisma__ServiceTypeClient<$Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceTypes.
     * @param {ServiceTypeCreateManyArgs} args - Arguments to create many ServiceTypes.
     * @example
     * // Create many ServiceTypes
     * const serviceType = await prisma.serviceType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceTypeCreateManyArgs>(args?: SelectSubset<T, ServiceTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceTypes and returns the data saved in the database.
     * @param {ServiceTypeCreateManyAndReturnArgs} args - Arguments to create many ServiceTypes.
     * @example
     * // Create many ServiceTypes
     * const serviceType = await prisma.serviceType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceTypes and only return the `id`
     * const serviceTypeWithIdOnly = await prisma.serviceType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceType.
     * @param {ServiceTypeDeleteArgs} args - Arguments to delete one ServiceType.
     * @example
     * // Delete one ServiceType
     * const ServiceType = await prisma.serviceType.delete({
     *   where: {
     *     // ... filter to delete one ServiceType
     *   }
     * })
     * 
     */
    delete<T extends ServiceTypeDeleteArgs>(args: SelectSubset<T, ServiceTypeDeleteArgs<ExtArgs>>): Prisma__ServiceTypeClient<$Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceType.
     * @param {ServiceTypeUpdateArgs} args - Arguments to update one ServiceType.
     * @example
     * // Update one ServiceType
     * const serviceType = await prisma.serviceType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceTypeUpdateArgs>(args: SelectSubset<T, ServiceTypeUpdateArgs<ExtArgs>>): Prisma__ServiceTypeClient<$Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceTypes.
     * @param {ServiceTypeDeleteManyArgs} args - Arguments to filter ServiceTypes to delete.
     * @example
     * // Delete a few ServiceTypes
     * const { count } = await prisma.serviceType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceTypeDeleteManyArgs>(args?: SelectSubset<T, ServiceTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceTypes
     * const serviceType = await prisma.serviceType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceTypeUpdateManyArgs>(args: SelectSubset<T, ServiceTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceTypes and returns the data updated in the database.
     * @param {ServiceTypeUpdateManyAndReturnArgs} args - Arguments to update many ServiceTypes.
     * @example
     * // Update many ServiceTypes
     * const serviceType = await prisma.serviceType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceTypes and only return the `id`
     * const serviceTypeWithIdOnly = await prisma.serviceType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceType.
     * @param {ServiceTypeUpsertArgs} args - Arguments to update or create a ServiceType.
     * @example
     * // Update or create a ServiceType
     * const serviceType = await prisma.serviceType.upsert({
     *   create: {
     *     // ... data to create a ServiceType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceType we want to update
     *   }
     * })
     */
    upsert<T extends ServiceTypeUpsertArgs>(args: SelectSubset<T, ServiceTypeUpsertArgs<ExtArgs>>): Prisma__ServiceTypeClient<$Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTypeCountArgs} args - Arguments to filter ServiceTypes to count.
     * @example
     * // Count the number of ServiceTypes
     * const count = await prisma.serviceType.count({
     *   where: {
     *     // ... the filter for the ServiceTypes we want to count
     *   }
     * })
    **/
    count<T extends ServiceTypeCountArgs>(
      args?: Subset<T, ServiceTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceTypeAggregateArgs>(args: Subset<T, ServiceTypeAggregateArgs>): Prisma.PrismaPromise<GetServiceTypeAggregateType<T>>

    /**
     * Group by ServiceType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceTypeGroupByArgs['orderBy'] }
        : { orderBy?: ServiceTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceType model
   */
  readonly fields: ServiceTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shopServices<T extends ServiceType$shopServicesArgs<ExtArgs> = {}>(args?: Subset<T, ServiceType$shopServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceType model
   */
  interface ServiceTypeFieldRefs {
    readonly id: FieldRef<"ServiceType", 'Int'>
    readonly name: FieldRef<"ServiceType", 'String'>
    readonly description: FieldRef<"ServiceType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ServiceType findUnique
   */
  export type ServiceTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTypeInclude<ExtArgs> | null
    /**
     * Filter, which ServiceType to fetch.
     */
    where: ServiceTypeWhereUniqueInput
  }

  /**
   * ServiceType findUniqueOrThrow
   */
  export type ServiceTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTypeInclude<ExtArgs> | null
    /**
     * Filter, which ServiceType to fetch.
     */
    where: ServiceTypeWhereUniqueInput
  }

  /**
   * ServiceType findFirst
   */
  export type ServiceTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTypeInclude<ExtArgs> | null
    /**
     * Filter, which ServiceType to fetch.
     */
    where?: ServiceTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceTypes to fetch.
     */
    orderBy?: ServiceTypeOrderByWithRelationInput | ServiceTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceTypes.
     */
    cursor?: ServiceTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceTypes.
     */
    distinct?: ServiceTypeScalarFieldEnum | ServiceTypeScalarFieldEnum[]
  }

  /**
   * ServiceType findFirstOrThrow
   */
  export type ServiceTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTypeInclude<ExtArgs> | null
    /**
     * Filter, which ServiceType to fetch.
     */
    where?: ServiceTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceTypes to fetch.
     */
    orderBy?: ServiceTypeOrderByWithRelationInput | ServiceTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceTypes.
     */
    cursor?: ServiceTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceTypes.
     */
    distinct?: ServiceTypeScalarFieldEnum | ServiceTypeScalarFieldEnum[]
  }

  /**
   * ServiceType findMany
   */
  export type ServiceTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTypeInclude<ExtArgs> | null
    /**
     * Filter, which ServiceTypes to fetch.
     */
    where?: ServiceTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceTypes to fetch.
     */
    orderBy?: ServiceTypeOrderByWithRelationInput | ServiceTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceTypes.
     */
    cursor?: ServiceTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceTypes.
     */
    skip?: number
    distinct?: ServiceTypeScalarFieldEnum | ServiceTypeScalarFieldEnum[]
  }

  /**
   * ServiceType create
   */
  export type ServiceTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceType.
     */
    data: XOR<ServiceTypeCreateInput, ServiceTypeUncheckedCreateInput>
  }

  /**
   * ServiceType createMany
   */
  export type ServiceTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceTypes.
     */
    data: ServiceTypeCreateManyInput | ServiceTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceType createManyAndReturn
   */
  export type ServiceTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceTypes.
     */
    data: ServiceTypeCreateManyInput | ServiceTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceType update
   */
  export type ServiceTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceType.
     */
    data: XOR<ServiceTypeUpdateInput, ServiceTypeUncheckedUpdateInput>
    /**
     * Choose, which ServiceType to update.
     */
    where: ServiceTypeWhereUniqueInput
  }

  /**
   * ServiceType updateMany
   */
  export type ServiceTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceTypes.
     */
    data: XOR<ServiceTypeUpdateManyMutationInput, ServiceTypeUncheckedUpdateManyInput>
    /**
     * Filter which ServiceTypes to update
     */
    where?: ServiceTypeWhereInput
    /**
     * Limit how many ServiceTypes to update.
     */
    limit?: number
  }

  /**
   * ServiceType updateManyAndReturn
   */
  export type ServiceTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * The data used to update ServiceTypes.
     */
    data: XOR<ServiceTypeUpdateManyMutationInput, ServiceTypeUncheckedUpdateManyInput>
    /**
     * Filter which ServiceTypes to update
     */
    where?: ServiceTypeWhereInput
    /**
     * Limit how many ServiceTypes to update.
     */
    limit?: number
  }

  /**
   * ServiceType upsert
   */
  export type ServiceTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceType to update in case it exists.
     */
    where: ServiceTypeWhereUniqueInput
    /**
     * In case the ServiceType found by the `where` argument doesn't exist, create a new ServiceType with this data.
     */
    create: XOR<ServiceTypeCreateInput, ServiceTypeUncheckedCreateInput>
    /**
     * In case the ServiceType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceTypeUpdateInput, ServiceTypeUncheckedUpdateInput>
  }

  /**
   * ServiceType delete
   */
  export type ServiceTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTypeInclude<ExtArgs> | null
    /**
     * Filter which ServiceType to delete.
     */
    where: ServiceTypeWhereUniqueInput
  }

  /**
   * ServiceType deleteMany
   */
  export type ServiceTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceTypes to delete
     */
    where?: ServiceTypeWhereInput
    /**
     * Limit how many ServiceTypes to delete.
     */
    limit?: number
  }

  /**
   * ServiceType.shopServices
   */
  export type ServiceType$shopServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceInclude<ExtArgs> | null
    where?: ShopServiceWhereInput
    orderBy?: ShopServiceOrderByWithRelationInput | ShopServiceOrderByWithRelationInput[]
    cursor?: ShopServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShopServiceScalarFieldEnum | ShopServiceScalarFieldEnum[]
  }

  /**
   * ServiceType without action
   */
  export type ServiceTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTypeInclude<ExtArgs> | null
  }


  /**
   * Model ShopService
   */

  export type AggregateShopService = {
    _count: ShopServiceCountAggregateOutputType | null
    _avg: ShopServiceAvgAggregateOutputType | null
    _sum: ShopServiceSumAggregateOutputType | null
    _min: ShopServiceMinAggregateOutputType | null
    _max: ShopServiceMaxAggregateOutputType | null
  }

  export type ShopServiceAvgAggregateOutputType = {
    id: number | null
    serviceCenterId: number | null
    serviceTypeId: number | null
    price: number | null
    duration: number | null
    discount: number | null
  }

  export type ShopServiceSumAggregateOutputType = {
    id: number | null
    serviceCenterId: number | null
    serviceTypeId: number | null
    price: number | null
    duration: number | null
    discount: number | null
  }

  export type ShopServiceMinAggregateOutputType = {
    id: number | null
    serviceCenterId: number | null
    serviceTypeId: number | null
    name: string | null
    description: string | null
    price: number | null
    unit: string | null
    duration: number | null
    discount: number | null
    isActive: boolean | null
  }

  export type ShopServiceMaxAggregateOutputType = {
    id: number | null
    serviceCenterId: number | null
    serviceTypeId: number | null
    name: string | null
    description: string | null
    price: number | null
    unit: string | null
    duration: number | null
    discount: number | null
    isActive: boolean | null
  }

  export type ShopServiceCountAggregateOutputType = {
    id: number
    serviceCenterId: number
    serviceTypeId: number
    name: number
    description: number
    price: number
    unit: number
    duration: number
    discount: number
    isActive: number
    _all: number
  }


  export type ShopServiceAvgAggregateInputType = {
    id?: true
    serviceCenterId?: true
    serviceTypeId?: true
    price?: true
    duration?: true
    discount?: true
  }

  export type ShopServiceSumAggregateInputType = {
    id?: true
    serviceCenterId?: true
    serviceTypeId?: true
    price?: true
    duration?: true
    discount?: true
  }

  export type ShopServiceMinAggregateInputType = {
    id?: true
    serviceCenterId?: true
    serviceTypeId?: true
    name?: true
    description?: true
    price?: true
    unit?: true
    duration?: true
    discount?: true
    isActive?: true
  }

  export type ShopServiceMaxAggregateInputType = {
    id?: true
    serviceCenterId?: true
    serviceTypeId?: true
    name?: true
    description?: true
    price?: true
    unit?: true
    duration?: true
    discount?: true
    isActive?: true
  }

  export type ShopServiceCountAggregateInputType = {
    id?: true
    serviceCenterId?: true
    serviceTypeId?: true
    name?: true
    description?: true
    price?: true
    unit?: true
    duration?: true
    discount?: true
    isActive?: true
    _all?: true
  }

  export type ShopServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShopService to aggregate.
     */
    where?: ShopServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopServices to fetch.
     */
    orderBy?: ShopServiceOrderByWithRelationInput | ShopServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShopServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShopServices
    **/
    _count?: true | ShopServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShopServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShopServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopServiceMaxAggregateInputType
  }

  export type GetShopServiceAggregateType<T extends ShopServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateShopService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShopService[P]>
      : GetScalarType<T[P], AggregateShopService[P]>
  }




  export type ShopServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShopServiceWhereInput
    orderBy?: ShopServiceOrderByWithAggregationInput | ShopServiceOrderByWithAggregationInput[]
    by: ShopServiceScalarFieldEnum[] | ShopServiceScalarFieldEnum
    having?: ShopServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopServiceCountAggregateInputType | true
    _avg?: ShopServiceAvgAggregateInputType
    _sum?: ShopServiceSumAggregateInputType
    _min?: ShopServiceMinAggregateInputType
    _max?: ShopServiceMaxAggregateInputType
  }

  export type ShopServiceGroupByOutputType = {
    id: number
    serviceCenterId: number
    serviceTypeId: number | null
    name: string
    description: string | null
    price: number
    unit: string
    duration: number | null
    discount: number | null
    isActive: boolean
    _count: ShopServiceCountAggregateOutputType | null
    _avg: ShopServiceAvgAggregateOutputType | null
    _sum: ShopServiceSumAggregateOutputType | null
    _min: ShopServiceMinAggregateOutputType | null
    _max: ShopServiceMaxAggregateOutputType | null
  }

  type GetShopServiceGroupByPayload<T extends ShopServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShopServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ShopServiceGroupByOutputType[P]>
        }
      >
    >


  export type ShopServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceCenterId?: boolean
    serviceTypeId?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    unit?: boolean
    duration?: boolean
    discount?: boolean
    isActive?: boolean
    serviceCenter?: boolean | ServiceCenterProfileDefaultArgs<ExtArgs>
    serviceType?: boolean | ShopService$serviceTypeArgs<ExtArgs>
  }, ExtArgs["result"]["shopService"]>

  export type ShopServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceCenterId?: boolean
    serviceTypeId?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    unit?: boolean
    duration?: boolean
    discount?: boolean
    isActive?: boolean
    serviceCenter?: boolean | ServiceCenterProfileDefaultArgs<ExtArgs>
    serviceType?: boolean | ShopService$serviceTypeArgs<ExtArgs>
  }, ExtArgs["result"]["shopService"]>

  export type ShopServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceCenterId?: boolean
    serviceTypeId?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    unit?: boolean
    duration?: boolean
    discount?: boolean
    isActive?: boolean
    serviceCenter?: boolean | ServiceCenterProfileDefaultArgs<ExtArgs>
    serviceType?: boolean | ShopService$serviceTypeArgs<ExtArgs>
  }, ExtArgs["result"]["shopService"]>

  export type ShopServiceSelectScalar = {
    id?: boolean
    serviceCenterId?: boolean
    serviceTypeId?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    unit?: boolean
    duration?: boolean
    discount?: boolean
    isActive?: boolean
  }

  export type ShopServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serviceCenterId" | "serviceTypeId" | "name" | "description" | "price" | "unit" | "duration" | "discount" | "isActive", ExtArgs["result"]["shopService"]>
  export type ShopServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceCenter?: boolean | ServiceCenterProfileDefaultArgs<ExtArgs>
    serviceType?: boolean | ShopService$serviceTypeArgs<ExtArgs>
  }
  export type ShopServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceCenter?: boolean | ServiceCenterProfileDefaultArgs<ExtArgs>
    serviceType?: boolean | ShopService$serviceTypeArgs<ExtArgs>
  }
  export type ShopServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceCenter?: boolean | ServiceCenterProfileDefaultArgs<ExtArgs>
    serviceType?: boolean | ShopService$serviceTypeArgs<ExtArgs>
  }

  export type $ShopServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShopService"
    objects: {
      serviceCenter: Prisma.$ServiceCenterProfilePayload<ExtArgs>
      serviceType: Prisma.$ServiceTypePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      serviceCenterId: number
      serviceTypeId: number | null
      name: string
      description: string | null
      price: number
      unit: string
      duration: number | null
      discount: number | null
      isActive: boolean
    }, ExtArgs["result"]["shopService"]>
    composites: {}
  }

  type ShopServiceGetPayload<S extends boolean | null | undefined | ShopServiceDefaultArgs> = $Result.GetResult<Prisma.$ShopServicePayload, S>

  type ShopServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShopServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShopServiceCountAggregateInputType | true
    }

  export interface ShopServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShopService'], meta: { name: 'ShopService' } }
    /**
     * Find zero or one ShopService that matches the filter.
     * @param {ShopServiceFindUniqueArgs} args - Arguments to find a ShopService
     * @example
     * // Get one ShopService
     * const shopService = await prisma.shopService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShopServiceFindUniqueArgs>(args: SelectSubset<T, ShopServiceFindUniqueArgs<ExtArgs>>): Prisma__ShopServiceClient<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShopService that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShopServiceFindUniqueOrThrowArgs} args - Arguments to find a ShopService
     * @example
     * // Get one ShopService
     * const shopService = await prisma.shopService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShopServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ShopServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShopServiceClient<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShopService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopServiceFindFirstArgs} args - Arguments to find a ShopService
     * @example
     * // Get one ShopService
     * const shopService = await prisma.shopService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShopServiceFindFirstArgs>(args?: SelectSubset<T, ShopServiceFindFirstArgs<ExtArgs>>): Prisma__ShopServiceClient<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShopService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopServiceFindFirstOrThrowArgs} args - Arguments to find a ShopService
     * @example
     * // Get one ShopService
     * const shopService = await prisma.shopService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShopServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ShopServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShopServiceClient<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShopServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShopServices
     * const shopServices = await prisma.shopService.findMany()
     * 
     * // Get first 10 ShopServices
     * const shopServices = await prisma.shopService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shopServiceWithIdOnly = await prisma.shopService.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShopServiceFindManyArgs>(args?: SelectSubset<T, ShopServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShopService.
     * @param {ShopServiceCreateArgs} args - Arguments to create a ShopService.
     * @example
     * // Create one ShopService
     * const ShopService = await prisma.shopService.create({
     *   data: {
     *     // ... data to create a ShopService
     *   }
     * })
     * 
     */
    create<T extends ShopServiceCreateArgs>(args: SelectSubset<T, ShopServiceCreateArgs<ExtArgs>>): Prisma__ShopServiceClient<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShopServices.
     * @param {ShopServiceCreateManyArgs} args - Arguments to create many ShopServices.
     * @example
     * // Create many ShopServices
     * const shopService = await prisma.shopService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShopServiceCreateManyArgs>(args?: SelectSubset<T, ShopServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShopServices and returns the data saved in the database.
     * @param {ShopServiceCreateManyAndReturnArgs} args - Arguments to create many ShopServices.
     * @example
     * // Create many ShopServices
     * const shopService = await prisma.shopService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShopServices and only return the `id`
     * const shopServiceWithIdOnly = await prisma.shopService.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShopServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, ShopServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShopService.
     * @param {ShopServiceDeleteArgs} args - Arguments to delete one ShopService.
     * @example
     * // Delete one ShopService
     * const ShopService = await prisma.shopService.delete({
     *   where: {
     *     // ... filter to delete one ShopService
     *   }
     * })
     * 
     */
    delete<T extends ShopServiceDeleteArgs>(args: SelectSubset<T, ShopServiceDeleteArgs<ExtArgs>>): Prisma__ShopServiceClient<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShopService.
     * @param {ShopServiceUpdateArgs} args - Arguments to update one ShopService.
     * @example
     * // Update one ShopService
     * const shopService = await prisma.shopService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShopServiceUpdateArgs>(args: SelectSubset<T, ShopServiceUpdateArgs<ExtArgs>>): Prisma__ShopServiceClient<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShopServices.
     * @param {ShopServiceDeleteManyArgs} args - Arguments to filter ShopServices to delete.
     * @example
     * // Delete a few ShopServices
     * const { count } = await prisma.shopService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShopServiceDeleteManyArgs>(args?: SelectSubset<T, ShopServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShopServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShopServices
     * const shopService = await prisma.shopService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShopServiceUpdateManyArgs>(args: SelectSubset<T, ShopServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShopServices and returns the data updated in the database.
     * @param {ShopServiceUpdateManyAndReturnArgs} args - Arguments to update many ShopServices.
     * @example
     * // Update many ShopServices
     * const shopService = await prisma.shopService.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShopServices and only return the `id`
     * const shopServiceWithIdOnly = await prisma.shopService.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShopServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, ShopServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShopService.
     * @param {ShopServiceUpsertArgs} args - Arguments to update or create a ShopService.
     * @example
     * // Update or create a ShopService
     * const shopService = await prisma.shopService.upsert({
     *   create: {
     *     // ... data to create a ShopService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShopService we want to update
     *   }
     * })
     */
    upsert<T extends ShopServiceUpsertArgs>(args: SelectSubset<T, ShopServiceUpsertArgs<ExtArgs>>): Prisma__ShopServiceClient<$Result.GetResult<Prisma.$ShopServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShopServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopServiceCountArgs} args - Arguments to filter ShopServices to count.
     * @example
     * // Count the number of ShopServices
     * const count = await prisma.shopService.count({
     *   where: {
     *     // ... the filter for the ShopServices we want to count
     *   }
     * })
    **/
    count<T extends ShopServiceCountArgs>(
      args?: Subset<T, ShopServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShopService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopServiceAggregateArgs>(args: Subset<T, ShopServiceAggregateArgs>): Prisma.PrismaPromise<GetShopServiceAggregateType<T>>

    /**
     * Group by ShopService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopServiceGroupByArgs['orderBy'] }
        : { orderBy?: ShopServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShopService model
   */
  readonly fields: ShopServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShopService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShopServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    serviceCenter<T extends ServiceCenterProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCenterProfileDefaultArgs<ExtArgs>>): Prisma__ServiceCenterProfileClient<$Result.GetResult<Prisma.$ServiceCenterProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    serviceType<T extends ShopService$serviceTypeArgs<ExtArgs> = {}>(args?: Subset<T, ShopService$serviceTypeArgs<ExtArgs>>): Prisma__ServiceTypeClient<$Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShopService model
   */
  interface ShopServiceFieldRefs {
    readonly id: FieldRef<"ShopService", 'Int'>
    readonly serviceCenterId: FieldRef<"ShopService", 'Int'>
    readonly serviceTypeId: FieldRef<"ShopService", 'Int'>
    readonly name: FieldRef<"ShopService", 'String'>
    readonly description: FieldRef<"ShopService", 'String'>
    readonly price: FieldRef<"ShopService", 'Float'>
    readonly unit: FieldRef<"ShopService", 'String'>
    readonly duration: FieldRef<"ShopService", 'Float'>
    readonly discount: FieldRef<"ShopService", 'Float'>
    readonly isActive: FieldRef<"ShopService", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ShopService findUnique
   */
  export type ShopServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceInclude<ExtArgs> | null
    /**
     * Filter, which ShopService to fetch.
     */
    where: ShopServiceWhereUniqueInput
  }

  /**
   * ShopService findUniqueOrThrow
   */
  export type ShopServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceInclude<ExtArgs> | null
    /**
     * Filter, which ShopService to fetch.
     */
    where: ShopServiceWhereUniqueInput
  }

  /**
   * ShopService findFirst
   */
  export type ShopServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceInclude<ExtArgs> | null
    /**
     * Filter, which ShopService to fetch.
     */
    where?: ShopServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopServices to fetch.
     */
    orderBy?: ShopServiceOrderByWithRelationInput | ShopServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShopServices.
     */
    cursor?: ShopServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShopServices.
     */
    distinct?: ShopServiceScalarFieldEnum | ShopServiceScalarFieldEnum[]
  }

  /**
   * ShopService findFirstOrThrow
   */
  export type ShopServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceInclude<ExtArgs> | null
    /**
     * Filter, which ShopService to fetch.
     */
    where?: ShopServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopServices to fetch.
     */
    orderBy?: ShopServiceOrderByWithRelationInput | ShopServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShopServices.
     */
    cursor?: ShopServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShopServices.
     */
    distinct?: ShopServiceScalarFieldEnum | ShopServiceScalarFieldEnum[]
  }

  /**
   * ShopService findMany
   */
  export type ShopServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceInclude<ExtArgs> | null
    /**
     * Filter, which ShopServices to fetch.
     */
    where?: ShopServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopServices to fetch.
     */
    orderBy?: ShopServiceOrderByWithRelationInput | ShopServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShopServices.
     */
    cursor?: ShopServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopServices.
     */
    skip?: number
    distinct?: ShopServiceScalarFieldEnum | ShopServiceScalarFieldEnum[]
  }

  /**
   * ShopService create
   */
  export type ShopServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a ShopService.
     */
    data: XOR<ShopServiceCreateInput, ShopServiceUncheckedCreateInput>
  }

  /**
   * ShopService createMany
   */
  export type ShopServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShopServices.
     */
    data: ShopServiceCreateManyInput | ShopServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShopService createManyAndReturn
   */
  export type ShopServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * The data used to create many ShopServices.
     */
    data: ShopServiceCreateManyInput | ShopServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShopService update
   */
  export type ShopServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a ShopService.
     */
    data: XOR<ShopServiceUpdateInput, ShopServiceUncheckedUpdateInput>
    /**
     * Choose, which ShopService to update.
     */
    where: ShopServiceWhereUniqueInput
  }

  /**
   * ShopService updateMany
   */
  export type ShopServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShopServices.
     */
    data: XOR<ShopServiceUpdateManyMutationInput, ShopServiceUncheckedUpdateManyInput>
    /**
     * Filter which ShopServices to update
     */
    where?: ShopServiceWhereInput
    /**
     * Limit how many ShopServices to update.
     */
    limit?: number
  }

  /**
   * ShopService updateManyAndReturn
   */
  export type ShopServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * The data used to update ShopServices.
     */
    data: XOR<ShopServiceUpdateManyMutationInput, ShopServiceUncheckedUpdateManyInput>
    /**
     * Filter which ShopServices to update
     */
    where?: ShopServiceWhereInput
    /**
     * Limit how many ShopServices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShopService upsert
   */
  export type ShopServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the ShopService to update in case it exists.
     */
    where: ShopServiceWhereUniqueInput
    /**
     * In case the ShopService found by the `where` argument doesn't exist, create a new ShopService with this data.
     */
    create: XOR<ShopServiceCreateInput, ShopServiceUncheckedCreateInput>
    /**
     * In case the ShopService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShopServiceUpdateInput, ShopServiceUncheckedUpdateInput>
  }

  /**
   * ShopService delete
   */
  export type ShopServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceInclude<ExtArgs> | null
    /**
     * Filter which ShopService to delete.
     */
    where: ShopServiceWhereUniqueInput
  }

  /**
   * ShopService deleteMany
   */
  export type ShopServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShopServices to delete
     */
    where?: ShopServiceWhereInput
    /**
     * Limit how many ShopServices to delete.
     */
    limit?: number
  }

  /**
   * ShopService.serviceType
   */
  export type ShopService$serviceTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceType
     */
    select?: ServiceTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceType
     */
    omit?: ServiceTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTypeInclude<ExtArgs> | null
    where?: ServiceTypeWhereInput
  }

  /**
   * ShopService without action
   */
  export type ShopServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopService
     */
    select?: ShopServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShopService
     */
    omit?: ShopServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopServiceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    phone: 'phone',
    role: 'role',
    isRegistrationComplete: 'isRegistrationComplete',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CarOwnerProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CarOwnerProfileScalarFieldEnum = (typeof CarOwnerProfileScalarFieldEnum)[keyof typeof CarOwnerProfileScalarFieldEnum]


  export const VehicleScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    vehicleName: 'vehicleName',
    model: 'model',
    year: 'year',
    licensePlate: 'licensePlate',
    color: 'color',
    vehicleType: 'vehicleType',
    isPrimary: 'isPrimary',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VehicleScalarFieldEnum = (typeof VehicleScalarFieldEnum)[keyof typeof VehicleScalarFieldEnum]


  export const ServiceCenterProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    businessName: 'businessName',
    address: 'address',
    businessRegistrationNumber: 'businessRegistrationNumber',
    servicesOffered: 'servicesOffered',
    operatingHours: 'operatingHours',
    logo: 'logo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceCenterProfileScalarFieldEnum = (typeof ServiceCenterProfileScalarFieldEnum)[keyof typeof ServiceCenterProfileScalarFieldEnum]


  export const PartSellerProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    shopName: 'shopName',
    address: 'address',
    categoriesSold: 'categoriesSold',
    inventoryCapacity: 'inventoryCapacity',
    contactPersonName: 'contactPersonName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PartSellerProfileScalarFieldEnum = (typeof PartSellerProfileScalarFieldEnum)[keyof typeof PartSellerProfileScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    planType: 'planType',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    paymentData: 'paymentData',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const ServiceTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type ServiceTypeScalarFieldEnum = (typeof ServiceTypeScalarFieldEnum)[keyof typeof ServiceTypeScalarFieldEnum]


  export const ShopServiceScalarFieldEnum: {
    id: 'id',
    serviceCenterId: 'serviceCenterId',
    serviceTypeId: 'serviceTypeId',
    name: 'name',
    description: 'description',
    price: 'price',
    unit: 'unit',
    duration: 'duration',
    discount: 'discount',
    isActive: 'isActive'
  };

  export type ShopServiceScalarFieldEnum = (typeof ShopServiceScalarFieldEnum)[keyof typeof ShopServiceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    isRegistrationComplete?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    carOwnerProfile?: XOR<CarOwnerProfileNullableScalarRelationFilter, CarOwnerProfileWhereInput> | null
    serviceCenterProfile?: XOR<ServiceCenterProfileNullableScalarRelationFilter, ServiceCenterProfileWhereInput> | null
    partSellerProfile?: XOR<PartSellerProfileNullableScalarRelationFilter, PartSellerProfileWhereInput> | null
    vehicles?: VehicleListRelationFilter
    subscription?: XOR<SubscriptionNullableScalarRelationFilter, SubscriptionWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    isRegistrationComplete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    carOwnerProfile?: CarOwnerProfileOrderByWithRelationInput
    serviceCenterProfile?: ServiceCenterProfileOrderByWithRelationInput
    partSellerProfile?: PartSellerProfileOrderByWithRelationInput
    vehicles?: VehicleOrderByRelationAggregateInput
    subscription?: SubscriptionOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    isRegistrationComplete?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    carOwnerProfile?: XOR<CarOwnerProfileNullableScalarRelationFilter, CarOwnerProfileWhereInput> | null
    serviceCenterProfile?: XOR<ServiceCenterProfileNullableScalarRelationFilter, ServiceCenterProfileWhereInput> | null
    partSellerProfile?: XOR<PartSellerProfileNullableScalarRelationFilter, PartSellerProfileWhereInput> | null
    vehicles?: VehicleListRelationFilter
    subscription?: XOR<SubscriptionNullableScalarRelationFilter, SubscriptionWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    isRegistrationComplete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringWithAggregatesFilter<"User"> | string
    isRegistrationComplete?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CarOwnerProfileWhereInput = {
    AND?: CarOwnerProfileWhereInput | CarOwnerProfileWhereInput[]
    OR?: CarOwnerProfileWhereInput[]
    NOT?: CarOwnerProfileWhereInput | CarOwnerProfileWhereInput[]
    id?: IntFilter<"CarOwnerProfile"> | number
    userId?: IntFilter<"CarOwnerProfile"> | number
    createdAt?: DateTimeFilter<"CarOwnerProfile"> | Date | string
    updatedAt?: DateTimeFilter<"CarOwnerProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CarOwnerProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CarOwnerProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: CarOwnerProfileWhereInput | CarOwnerProfileWhereInput[]
    OR?: CarOwnerProfileWhereInput[]
    NOT?: CarOwnerProfileWhereInput | CarOwnerProfileWhereInput[]
    createdAt?: DateTimeFilter<"CarOwnerProfile"> | Date | string
    updatedAt?: DateTimeFilter<"CarOwnerProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type CarOwnerProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CarOwnerProfileCountOrderByAggregateInput
    _avg?: CarOwnerProfileAvgOrderByAggregateInput
    _max?: CarOwnerProfileMaxOrderByAggregateInput
    _min?: CarOwnerProfileMinOrderByAggregateInput
    _sum?: CarOwnerProfileSumOrderByAggregateInput
  }

  export type CarOwnerProfileScalarWhereWithAggregatesInput = {
    AND?: CarOwnerProfileScalarWhereWithAggregatesInput | CarOwnerProfileScalarWhereWithAggregatesInput[]
    OR?: CarOwnerProfileScalarWhereWithAggregatesInput[]
    NOT?: CarOwnerProfileScalarWhereWithAggregatesInput | CarOwnerProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CarOwnerProfile"> | number
    userId?: IntWithAggregatesFilter<"CarOwnerProfile"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CarOwnerProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CarOwnerProfile"> | Date | string
  }

  export type VehicleWhereInput = {
    AND?: VehicleWhereInput | VehicleWhereInput[]
    OR?: VehicleWhereInput[]
    NOT?: VehicleWhereInput | VehicleWhereInput[]
    id?: IntFilter<"Vehicle"> | number
    userId?: IntFilter<"Vehicle"> | number
    vehicleName?: StringFilter<"Vehicle"> | string
    model?: StringFilter<"Vehicle"> | string
    year?: IntFilter<"Vehicle"> | number
    licensePlate?: StringFilter<"Vehicle"> | string
    color?: StringFilter<"Vehicle"> | string
    vehicleType?: StringFilter<"Vehicle"> | string
    isPrimary?: BoolFilter<"Vehicle"> | boolean
    createdAt?: DateTimeFilter<"Vehicle"> | Date | string
    updatedAt?: DateTimeFilter<"Vehicle"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type VehicleOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    vehicleName?: SortOrder
    model?: SortOrder
    year?: SortOrder
    licensePlate?: SortOrder
    color?: SortOrder
    vehicleType?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type VehicleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    licensePlate?: string
    AND?: VehicleWhereInput | VehicleWhereInput[]
    OR?: VehicleWhereInput[]
    NOT?: VehicleWhereInput | VehicleWhereInput[]
    userId?: IntFilter<"Vehicle"> | number
    vehicleName?: StringFilter<"Vehicle"> | string
    model?: StringFilter<"Vehicle"> | string
    year?: IntFilter<"Vehicle"> | number
    color?: StringFilter<"Vehicle"> | string
    vehicleType?: StringFilter<"Vehicle"> | string
    isPrimary?: BoolFilter<"Vehicle"> | boolean
    createdAt?: DateTimeFilter<"Vehicle"> | Date | string
    updatedAt?: DateTimeFilter<"Vehicle"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "licensePlate">

  export type VehicleOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    vehicleName?: SortOrder
    model?: SortOrder
    year?: SortOrder
    licensePlate?: SortOrder
    color?: SortOrder
    vehicleType?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VehicleCountOrderByAggregateInput
    _avg?: VehicleAvgOrderByAggregateInput
    _max?: VehicleMaxOrderByAggregateInput
    _min?: VehicleMinOrderByAggregateInput
    _sum?: VehicleSumOrderByAggregateInput
  }

  export type VehicleScalarWhereWithAggregatesInput = {
    AND?: VehicleScalarWhereWithAggregatesInput | VehicleScalarWhereWithAggregatesInput[]
    OR?: VehicleScalarWhereWithAggregatesInput[]
    NOT?: VehicleScalarWhereWithAggregatesInput | VehicleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Vehicle"> | number
    userId?: IntWithAggregatesFilter<"Vehicle"> | number
    vehicleName?: StringWithAggregatesFilter<"Vehicle"> | string
    model?: StringWithAggregatesFilter<"Vehicle"> | string
    year?: IntWithAggregatesFilter<"Vehicle"> | number
    licensePlate?: StringWithAggregatesFilter<"Vehicle"> | string
    color?: StringWithAggregatesFilter<"Vehicle"> | string
    vehicleType?: StringWithAggregatesFilter<"Vehicle"> | string
    isPrimary?: BoolWithAggregatesFilter<"Vehicle"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Vehicle"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Vehicle"> | Date | string
  }

  export type ServiceCenterProfileWhereInput = {
    AND?: ServiceCenterProfileWhereInput | ServiceCenterProfileWhereInput[]
    OR?: ServiceCenterProfileWhereInput[]
    NOT?: ServiceCenterProfileWhereInput | ServiceCenterProfileWhereInput[]
    id?: IntFilter<"ServiceCenterProfile"> | number
    userId?: IntFilter<"ServiceCenterProfile"> | number
    businessName?: StringFilter<"ServiceCenterProfile"> | string
    address?: StringFilter<"ServiceCenterProfile"> | string
    businessRegistrationNumber?: StringFilter<"ServiceCenterProfile"> | string
    servicesOffered?: StringFilter<"ServiceCenterProfile"> | string
    operatingHours?: StringFilter<"ServiceCenterProfile"> | string
    logo?: StringNullableFilter<"ServiceCenterProfile"> | string | null
    createdAt?: DateTimeFilter<"ServiceCenterProfile"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceCenterProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    shopServices?: ShopServiceListRelationFilter
  }

  export type ServiceCenterProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    businessName?: SortOrder
    address?: SortOrder
    businessRegistrationNumber?: SortOrder
    servicesOffered?: SortOrder
    operatingHours?: SortOrder
    logo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    shopServices?: ShopServiceOrderByRelationAggregateInput
  }

  export type ServiceCenterProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: ServiceCenterProfileWhereInput | ServiceCenterProfileWhereInput[]
    OR?: ServiceCenterProfileWhereInput[]
    NOT?: ServiceCenterProfileWhereInput | ServiceCenterProfileWhereInput[]
    businessName?: StringFilter<"ServiceCenterProfile"> | string
    address?: StringFilter<"ServiceCenterProfile"> | string
    businessRegistrationNumber?: StringFilter<"ServiceCenterProfile"> | string
    servicesOffered?: StringFilter<"ServiceCenterProfile"> | string
    operatingHours?: StringFilter<"ServiceCenterProfile"> | string
    logo?: StringNullableFilter<"ServiceCenterProfile"> | string | null
    createdAt?: DateTimeFilter<"ServiceCenterProfile"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceCenterProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    shopServices?: ShopServiceListRelationFilter
  }, "id" | "userId">

  export type ServiceCenterProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    businessName?: SortOrder
    address?: SortOrder
    businessRegistrationNumber?: SortOrder
    servicesOffered?: SortOrder
    operatingHours?: SortOrder
    logo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceCenterProfileCountOrderByAggregateInput
    _avg?: ServiceCenterProfileAvgOrderByAggregateInput
    _max?: ServiceCenterProfileMaxOrderByAggregateInput
    _min?: ServiceCenterProfileMinOrderByAggregateInput
    _sum?: ServiceCenterProfileSumOrderByAggregateInput
  }

  export type ServiceCenterProfileScalarWhereWithAggregatesInput = {
    AND?: ServiceCenterProfileScalarWhereWithAggregatesInput | ServiceCenterProfileScalarWhereWithAggregatesInput[]
    OR?: ServiceCenterProfileScalarWhereWithAggregatesInput[]
    NOT?: ServiceCenterProfileScalarWhereWithAggregatesInput | ServiceCenterProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ServiceCenterProfile"> | number
    userId?: IntWithAggregatesFilter<"ServiceCenterProfile"> | number
    businessName?: StringWithAggregatesFilter<"ServiceCenterProfile"> | string
    address?: StringWithAggregatesFilter<"ServiceCenterProfile"> | string
    businessRegistrationNumber?: StringWithAggregatesFilter<"ServiceCenterProfile"> | string
    servicesOffered?: StringWithAggregatesFilter<"ServiceCenterProfile"> | string
    operatingHours?: StringWithAggregatesFilter<"ServiceCenterProfile"> | string
    logo?: StringNullableWithAggregatesFilter<"ServiceCenterProfile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ServiceCenterProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ServiceCenterProfile"> | Date | string
  }

  export type PartSellerProfileWhereInput = {
    AND?: PartSellerProfileWhereInput | PartSellerProfileWhereInput[]
    OR?: PartSellerProfileWhereInput[]
    NOT?: PartSellerProfileWhereInput | PartSellerProfileWhereInput[]
    id?: IntFilter<"PartSellerProfile"> | number
    userId?: IntFilter<"PartSellerProfile"> | number
    shopName?: StringFilter<"PartSellerProfile"> | string
    address?: StringFilter<"PartSellerProfile"> | string
    categoriesSold?: StringFilter<"PartSellerProfile"> | string
    inventoryCapacity?: StringNullableFilter<"PartSellerProfile"> | string | null
    contactPersonName?: StringFilter<"PartSellerProfile"> | string
    createdAt?: DateTimeFilter<"PartSellerProfile"> | Date | string
    updatedAt?: DateTimeFilter<"PartSellerProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PartSellerProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    address?: SortOrder
    categoriesSold?: SortOrder
    inventoryCapacity?: SortOrderInput | SortOrder
    contactPersonName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PartSellerProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: PartSellerProfileWhereInput | PartSellerProfileWhereInput[]
    OR?: PartSellerProfileWhereInput[]
    NOT?: PartSellerProfileWhereInput | PartSellerProfileWhereInput[]
    shopName?: StringFilter<"PartSellerProfile"> | string
    address?: StringFilter<"PartSellerProfile"> | string
    categoriesSold?: StringFilter<"PartSellerProfile"> | string
    inventoryCapacity?: StringNullableFilter<"PartSellerProfile"> | string | null
    contactPersonName?: StringFilter<"PartSellerProfile"> | string
    createdAt?: DateTimeFilter<"PartSellerProfile"> | Date | string
    updatedAt?: DateTimeFilter<"PartSellerProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type PartSellerProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    address?: SortOrder
    categoriesSold?: SortOrder
    inventoryCapacity?: SortOrderInput | SortOrder
    contactPersonName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PartSellerProfileCountOrderByAggregateInput
    _avg?: PartSellerProfileAvgOrderByAggregateInput
    _max?: PartSellerProfileMaxOrderByAggregateInput
    _min?: PartSellerProfileMinOrderByAggregateInput
    _sum?: PartSellerProfileSumOrderByAggregateInput
  }

  export type PartSellerProfileScalarWhereWithAggregatesInput = {
    AND?: PartSellerProfileScalarWhereWithAggregatesInput | PartSellerProfileScalarWhereWithAggregatesInput[]
    OR?: PartSellerProfileScalarWhereWithAggregatesInput[]
    NOT?: PartSellerProfileScalarWhereWithAggregatesInput | PartSellerProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PartSellerProfile"> | number
    userId?: IntWithAggregatesFilter<"PartSellerProfile"> | number
    shopName?: StringWithAggregatesFilter<"PartSellerProfile"> | string
    address?: StringWithAggregatesFilter<"PartSellerProfile"> | string
    categoriesSold?: StringWithAggregatesFilter<"PartSellerProfile"> | string
    inventoryCapacity?: StringNullableWithAggregatesFilter<"PartSellerProfile"> | string | null
    contactPersonName?: StringWithAggregatesFilter<"PartSellerProfile"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PartSellerProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PartSellerProfile"> | Date | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: IntFilter<"Subscription"> | number
    userId?: IntFilter<"Subscription"> | number
    planType?: StringFilter<"Subscription"> | string
    status?: StringFilter<"Subscription"> | string
    startDate?: DateTimeFilter<"Subscription"> | Date | string
    endDate?: DateTimeFilter<"Subscription"> | Date | string
    paymentData?: StringFilter<"Subscription"> | string
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    planType?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    paymentData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    planType?: StringFilter<"Subscription"> | string
    status?: StringFilter<"Subscription"> | string
    startDate?: DateTimeFilter<"Subscription"> | Date | string
    endDate?: DateTimeFilter<"Subscription"> | Date | string
    paymentData?: StringFilter<"Subscription"> | string
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    planType?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    paymentData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _avg?: SubscriptionAvgOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
    _sum?: SubscriptionSumOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subscription"> | number
    userId?: IntWithAggregatesFilter<"Subscription"> | number
    planType?: StringWithAggregatesFilter<"Subscription"> | string
    status?: StringWithAggregatesFilter<"Subscription"> | string
    startDate?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    paymentData?: StringWithAggregatesFilter<"Subscription"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
  }

  export type ServiceTypeWhereInput = {
    AND?: ServiceTypeWhereInput | ServiceTypeWhereInput[]
    OR?: ServiceTypeWhereInput[]
    NOT?: ServiceTypeWhereInput | ServiceTypeWhereInput[]
    id?: IntFilter<"ServiceType"> | number
    name?: StringFilter<"ServiceType"> | string
    description?: StringNullableFilter<"ServiceType"> | string | null
    shopServices?: ShopServiceListRelationFilter
  }

  export type ServiceTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    shopServices?: ShopServiceOrderByRelationAggregateInput
  }

  export type ServiceTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ServiceTypeWhereInput | ServiceTypeWhereInput[]
    OR?: ServiceTypeWhereInput[]
    NOT?: ServiceTypeWhereInput | ServiceTypeWhereInput[]
    description?: StringNullableFilter<"ServiceType"> | string | null
    shopServices?: ShopServiceListRelationFilter
  }, "id" | "name">

  export type ServiceTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: ServiceTypeCountOrderByAggregateInput
    _avg?: ServiceTypeAvgOrderByAggregateInput
    _max?: ServiceTypeMaxOrderByAggregateInput
    _min?: ServiceTypeMinOrderByAggregateInput
    _sum?: ServiceTypeSumOrderByAggregateInput
  }

  export type ServiceTypeScalarWhereWithAggregatesInput = {
    AND?: ServiceTypeScalarWhereWithAggregatesInput | ServiceTypeScalarWhereWithAggregatesInput[]
    OR?: ServiceTypeScalarWhereWithAggregatesInput[]
    NOT?: ServiceTypeScalarWhereWithAggregatesInput | ServiceTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ServiceType"> | number
    name?: StringWithAggregatesFilter<"ServiceType"> | string
    description?: StringNullableWithAggregatesFilter<"ServiceType"> | string | null
  }

  export type ShopServiceWhereInput = {
    AND?: ShopServiceWhereInput | ShopServiceWhereInput[]
    OR?: ShopServiceWhereInput[]
    NOT?: ShopServiceWhereInput | ShopServiceWhereInput[]
    id?: IntFilter<"ShopService"> | number
    serviceCenterId?: IntFilter<"ShopService"> | number
    serviceTypeId?: IntNullableFilter<"ShopService"> | number | null
    name?: StringFilter<"ShopService"> | string
    description?: StringNullableFilter<"ShopService"> | string | null
    price?: FloatFilter<"ShopService"> | number
    unit?: StringFilter<"ShopService"> | string
    duration?: FloatNullableFilter<"ShopService"> | number | null
    discount?: FloatNullableFilter<"ShopService"> | number | null
    isActive?: BoolFilter<"ShopService"> | boolean
    serviceCenter?: XOR<ServiceCenterProfileScalarRelationFilter, ServiceCenterProfileWhereInput>
    serviceType?: XOR<ServiceTypeNullableScalarRelationFilter, ServiceTypeWhereInput> | null
  }

  export type ShopServiceOrderByWithRelationInput = {
    id?: SortOrder
    serviceCenterId?: SortOrder
    serviceTypeId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    unit?: SortOrder
    duration?: SortOrderInput | SortOrder
    discount?: SortOrderInput | SortOrder
    isActive?: SortOrder
    serviceCenter?: ServiceCenterProfileOrderByWithRelationInput
    serviceType?: ServiceTypeOrderByWithRelationInput
  }

  export type ShopServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShopServiceWhereInput | ShopServiceWhereInput[]
    OR?: ShopServiceWhereInput[]
    NOT?: ShopServiceWhereInput | ShopServiceWhereInput[]
    serviceCenterId?: IntFilter<"ShopService"> | number
    serviceTypeId?: IntNullableFilter<"ShopService"> | number | null
    name?: StringFilter<"ShopService"> | string
    description?: StringNullableFilter<"ShopService"> | string | null
    price?: FloatFilter<"ShopService"> | number
    unit?: StringFilter<"ShopService"> | string
    duration?: FloatNullableFilter<"ShopService"> | number | null
    discount?: FloatNullableFilter<"ShopService"> | number | null
    isActive?: BoolFilter<"ShopService"> | boolean
    serviceCenter?: XOR<ServiceCenterProfileScalarRelationFilter, ServiceCenterProfileWhereInput>
    serviceType?: XOR<ServiceTypeNullableScalarRelationFilter, ServiceTypeWhereInput> | null
  }, "id">

  export type ShopServiceOrderByWithAggregationInput = {
    id?: SortOrder
    serviceCenterId?: SortOrder
    serviceTypeId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    unit?: SortOrder
    duration?: SortOrderInput | SortOrder
    discount?: SortOrderInput | SortOrder
    isActive?: SortOrder
    _count?: ShopServiceCountOrderByAggregateInput
    _avg?: ShopServiceAvgOrderByAggregateInput
    _max?: ShopServiceMaxOrderByAggregateInput
    _min?: ShopServiceMinOrderByAggregateInput
    _sum?: ShopServiceSumOrderByAggregateInput
  }

  export type ShopServiceScalarWhereWithAggregatesInput = {
    AND?: ShopServiceScalarWhereWithAggregatesInput | ShopServiceScalarWhereWithAggregatesInput[]
    OR?: ShopServiceScalarWhereWithAggregatesInput[]
    NOT?: ShopServiceScalarWhereWithAggregatesInput | ShopServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShopService"> | number
    serviceCenterId?: IntWithAggregatesFilter<"ShopService"> | number
    serviceTypeId?: IntNullableWithAggregatesFilter<"ShopService"> | number | null
    name?: StringWithAggregatesFilter<"ShopService"> | string
    description?: StringNullableWithAggregatesFilter<"ShopService"> | string | null
    price?: FloatWithAggregatesFilter<"ShopService"> | number
    unit?: StringWithAggregatesFilter<"ShopService"> | string
    duration?: FloatNullableWithAggregatesFilter<"ShopService"> | number | null
    discount?: FloatNullableWithAggregatesFilter<"ShopService"> | number | null
    isActive?: BoolWithAggregatesFilter<"ShopService"> | boolean
  }

  export type UserCreateInput = {
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    carOwnerProfile?: CarOwnerProfileCreateNestedOneWithoutUserInput
    serviceCenterProfile?: ServiceCenterProfileCreateNestedOneWithoutUserInput
    partSellerProfile?: PartSellerProfileCreateNestedOneWithoutUserInput
    vehicles?: VehicleCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    carOwnerProfile?: CarOwnerProfileUncheckedCreateNestedOneWithoutUserInput
    serviceCenterProfile?: ServiceCenterProfileUncheckedCreateNestedOneWithoutUserInput
    partSellerProfile?: PartSellerProfileUncheckedCreateNestedOneWithoutUserInput
    vehicles?: VehicleUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carOwnerProfile?: CarOwnerProfileUpdateOneWithoutUserNestedInput
    serviceCenterProfile?: ServiceCenterProfileUpdateOneWithoutUserNestedInput
    partSellerProfile?: PartSellerProfileUpdateOneWithoutUserNestedInput
    vehicles?: VehicleUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carOwnerProfile?: CarOwnerProfileUncheckedUpdateOneWithoutUserNestedInput
    serviceCenterProfile?: ServiceCenterProfileUncheckedUpdateOneWithoutUserNestedInput
    partSellerProfile?: PartSellerProfileUncheckedUpdateOneWithoutUserNestedInput
    vehicles?: VehicleUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarOwnerProfileCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCarOwnerProfileInput
  }

  export type CarOwnerProfileUncheckedCreateInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarOwnerProfileUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCarOwnerProfileNestedInput
  }

  export type CarOwnerProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarOwnerProfileCreateManyInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarOwnerProfileUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarOwnerProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleCreateInput = {
    vehicleName: string
    model: string
    year: number
    licensePlate: string
    color: string
    vehicleType: string
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutVehiclesInput
  }

  export type VehicleUncheckedCreateInput = {
    id?: number
    userId: number
    vehicleName: string
    model: string
    year: number
    licensePlate: string
    color: string
    vehicleType: string
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VehicleUpdateInput = {
    vehicleName?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    licensePlate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVehiclesNestedInput
  }

  export type VehicleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    vehicleName?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    licensePlate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleCreateManyInput = {
    id?: number
    userId: number
    vehicleName: string
    model: string
    year: number
    licensePlate: string
    color: string
    vehicleType: string
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VehicleUpdateManyMutationInput = {
    vehicleName?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    licensePlate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    vehicleName?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    licensePlate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCenterProfileCreateInput = {
    businessName: string
    address: string
    businessRegistrationNumber: string
    servicesOffered: string
    operatingHours: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutServiceCenterProfileInput
    shopServices?: ShopServiceCreateNestedManyWithoutServiceCenterInput
  }

  export type ServiceCenterProfileUncheckedCreateInput = {
    id?: number
    userId: number
    businessName: string
    address: string
    businessRegistrationNumber: string
    servicesOffered: string
    operatingHours: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shopServices?: ShopServiceUncheckedCreateNestedManyWithoutServiceCenterInput
  }

  export type ServiceCenterProfileUpdateInput = {
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    businessRegistrationNumber?: StringFieldUpdateOperationsInput | string
    servicesOffered?: StringFieldUpdateOperationsInput | string
    operatingHours?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutServiceCenterProfileNestedInput
    shopServices?: ShopServiceUpdateManyWithoutServiceCenterNestedInput
  }

  export type ServiceCenterProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    businessRegistrationNumber?: StringFieldUpdateOperationsInput | string
    servicesOffered?: StringFieldUpdateOperationsInput | string
    operatingHours?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopServices?: ShopServiceUncheckedUpdateManyWithoutServiceCenterNestedInput
  }

  export type ServiceCenterProfileCreateManyInput = {
    id?: number
    userId: number
    businessName: string
    address: string
    businessRegistrationNumber: string
    servicesOffered: string
    operatingHours: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCenterProfileUpdateManyMutationInput = {
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    businessRegistrationNumber?: StringFieldUpdateOperationsInput | string
    servicesOffered?: StringFieldUpdateOperationsInput | string
    operatingHours?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCenterProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    businessRegistrationNumber?: StringFieldUpdateOperationsInput | string
    servicesOffered?: StringFieldUpdateOperationsInput | string
    operatingHours?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartSellerProfileCreateInput = {
    shopName: string
    address: string
    categoriesSold: string
    inventoryCapacity?: string | null
    contactPersonName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPartSellerProfileInput
  }

  export type PartSellerProfileUncheckedCreateInput = {
    id?: number
    userId: number
    shopName: string
    address: string
    categoriesSold: string
    inventoryCapacity?: string | null
    contactPersonName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartSellerProfileUpdateInput = {
    shopName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    categoriesSold?: StringFieldUpdateOperationsInput | string
    inventoryCapacity?: NullableStringFieldUpdateOperationsInput | string | null
    contactPersonName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPartSellerProfileNestedInput
  }

  export type PartSellerProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    shopName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    categoriesSold?: StringFieldUpdateOperationsInput | string
    inventoryCapacity?: NullableStringFieldUpdateOperationsInput | string | null
    contactPersonName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartSellerProfileCreateManyInput = {
    id?: number
    userId: number
    shopName: string
    address: string
    categoriesSold: string
    inventoryCapacity?: string | null
    contactPersonName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartSellerProfileUpdateManyMutationInput = {
    shopName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    categoriesSold?: StringFieldUpdateOperationsInput | string
    inventoryCapacity?: NullableStringFieldUpdateOperationsInput | string | null
    contactPersonName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartSellerProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    shopName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    categoriesSold?: StringFieldUpdateOperationsInput | string
    inventoryCapacity?: NullableStringFieldUpdateOperationsInput | string | null
    contactPersonName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateInput = {
    planType: string
    status: string
    startDate: Date | string
    endDate: Date | string
    paymentData: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: number
    userId: number
    planType: string
    status: string
    startDate: Date | string
    endDate: Date | string
    paymentData: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateInput = {
    planType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    planType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateManyInput = {
    id?: number
    userId: number
    planType: string
    status: string
    startDate: Date | string
    endDate: Date | string
    paymentData: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateManyMutationInput = {
    planType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    planType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceTypeCreateInput = {
    name: string
    description?: string | null
    shopServices?: ShopServiceCreateNestedManyWithoutServiceTypeInput
  }

  export type ServiceTypeUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    shopServices?: ShopServiceUncheckedCreateNestedManyWithoutServiceTypeInput
  }

  export type ServiceTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shopServices?: ShopServiceUpdateManyWithoutServiceTypeNestedInput
  }

  export type ServiceTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shopServices?: ShopServiceUncheckedUpdateManyWithoutServiceTypeNestedInput
  }

  export type ServiceTypeCreateManyInput = {
    id?: number
    name: string
    description?: string | null
  }

  export type ServiceTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShopServiceCreateInput = {
    name: string
    description?: string | null
    price: number
    unit: string
    duration?: number | null
    discount?: number | null
    isActive?: boolean
    serviceCenter: ServiceCenterProfileCreateNestedOneWithoutShopServicesInput
    serviceType?: ServiceTypeCreateNestedOneWithoutShopServicesInput
  }

  export type ShopServiceUncheckedCreateInput = {
    id?: number
    serviceCenterId: number
    serviceTypeId?: number | null
    name: string
    description?: string | null
    price: number
    unit: string
    duration?: number | null
    discount?: number | null
    isActive?: boolean
  }

  export type ShopServiceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    serviceCenter?: ServiceCenterProfileUpdateOneRequiredWithoutShopServicesNestedInput
    serviceType?: ServiceTypeUpdateOneWithoutShopServicesNestedInput
  }

  export type ShopServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceCenterId?: IntFieldUpdateOperationsInput | number
    serviceTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ShopServiceCreateManyInput = {
    id?: number
    serviceCenterId: number
    serviceTypeId?: number | null
    name: string
    description?: string | null
    price: number
    unit: string
    duration?: number | null
    discount?: number | null
    isActive?: boolean
  }

  export type ShopServiceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ShopServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceCenterId?: IntFieldUpdateOperationsInput | number
    serviceTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CarOwnerProfileNullableScalarRelationFilter = {
    is?: CarOwnerProfileWhereInput | null
    isNot?: CarOwnerProfileWhereInput | null
  }

  export type ServiceCenterProfileNullableScalarRelationFilter = {
    is?: ServiceCenterProfileWhereInput | null
    isNot?: ServiceCenterProfileWhereInput | null
  }

  export type PartSellerProfileNullableScalarRelationFilter = {
    is?: PartSellerProfileWhereInput | null
    isNot?: PartSellerProfileWhereInput | null
  }

  export type VehicleListRelationFilter = {
    every?: VehicleWhereInput
    some?: VehicleWhereInput
    none?: VehicleWhereInput
  }

  export type SubscriptionNullableScalarRelationFilter = {
    is?: SubscriptionWhereInput | null
    isNot?: SubscriptionWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type VehicleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    isRegistrationComplete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    isRegistrationComplete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    isRegistrationComplete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CarOwnerProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarOwnerProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type CarOwnerProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarOwnerProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarOwnerProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type VehicleCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    vehicleName?: SortOrder
    model?: SortOrder
    year?: SortOrder
    licensePlate?: SortOrder
    color?: SortOrder
    vehicleType?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VehicleAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    year?: SortOrder
  }

  export type VehicleMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    vehicleName?: SortOrder
    model?: SortOrder
    year?: SortOrder
    licensePlate?: SortOrder
    color?: SortOrder
    vehicleType?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VehicleMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    vehicleName?: SortOrder
    model?: SortOrder
    year?: SortOrder
    licensePlate?: SortOrder
    color?: SortOrder
    vehicleType?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VehicleSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    year?: SortOrder
  }

  export type ShopServiceListRelationFilter = {
    every?: ShopServiceWhereInput
    some?: ShopServiceWhereInput
    none?: ShopServiceWhereInput
  }

  export type ShopServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceCenterProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    businessName?: SortOrder
    address?: SortOrder
    businessRegistrationNumber?: SortOrder
    servicesOffered?: SortOrder
    operatingHours?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCenterProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ServiceCenterProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    businessName?: SortOrder
    address?: SortOrder
    businessRegistrationNumber?: SortOrder
    servicesOffered?: SortOrder
    operatingHours?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCenterProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    businessName?: SortOrder
    address?: SortOrder
    businessRegistrationNumber?: SortOrder
    servicesOffered?: SortOrder
    operatingHours?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCenterProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PartSellerProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    address?: SortOrder
    categoriesSold?: SortOrder
    inventoryCapacity?: SortOrder
    contactPersonName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartSellerProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PartSellerProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    address?: SortOrder
    categoriesSold?: SortOrder
    inventoryCapacity?: SortOrder
    contactPersonName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartSellerProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    shopName?: SortOrder
    address?: SortOrder
    categoriesSold?: SortOrder
    inventoryCapacity?: SortOrder
    contactPersonName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartSellerProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planType?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    paymentData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planType?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    paymentData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planType?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    paymentData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ServiceTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ServiceTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ServiceTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ServiceTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ServiceTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ServiceCenterProfileScalarRelationFilter = {
    is?: ServiceCenterProfileWhereInput
    isNot?: ServiceCenterProfileWhereInput
  }

  export type ServiceTypeNullableScalarRelationFilter = {
    is?: ServiceTypeWhereInput | null
    isNot?: ServiceTypeWhereInput | null
  }

  export type ShopServiceCountOrderByAggregateInput = {
    id?: SortOrder
    serviceCenterId?: SortOrder
    serviceTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    unit?: SortOrder
    duration?: SortOrder
    discount?: SortOrder
    isActive?: SortOrder
  }

  export type ShopServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    serviceCenterId?: SortOrder
    serviceTypeId?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    discount?: SortOrder
  }

  export type ShopServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceCenterId?: SortOrder
    serviceTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    unit?: SortOrder
    duration?: SortOrder
    discount?: SortOrder
    isActive?: SortOrder
  }

  export type ShopServiceMinOrderByAggregateInput = {
    id?: SortOrder
    serviceCenterId?: SortOrder
    serviceTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    unit?: SortOrder
    duration?: SortOrder
    discount?: SortOrder
    isActive?: SortOrder
  }

  export type ShopServiceSumOrderByAggregateInput = {
    id?: SortOrder
    serviceCenterId?: SortOrder
    serviceTypeId?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    discount?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type CarOwnerProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<CarOwnerProfileCreateWithoutUserInput, CarOwnerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: CarOwnerProfileCreateOrConnectWithoutUserInput
    connect?: CarOwnerProfileWhereUniqueInput
  }

  export type ServiceCenterProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ServiceCenterProfileCreateWithoutUserInput, ServiceCenterProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ServiceCenterProfileCreateOrConnectWithoutUserInput
    connect?: ServiceCenterProfileWhereUniqueInput
  }

  export type PartSellerProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<PartSellerProfileCreateWithoutUserInput, PartSellerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PartSellerProfileCreateOrConnectWithoutUserInput
    connect?: PartSellerProfileWhereUniqueInput
  }

  export type VehicleCreateNestedManyWithoutUserInput = {
    create?: XOR<VehicleCreateWithoutUserInput, VehicleUncheckedCreateWithoutUserInput> | VehicleCreateWithoutUserInput[] | VehicleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutUserInput | VehicleCreateOrConnectWithoutUserInput[]
    createMany?: VehicleCreateManyUserInputEnvelope
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedOneWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type CarOwnerProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CarOwnerProfileCreateWithoutUserInput, CarOwnerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: CarOwnerProfileCreateOrConnectWithoutUserInput
    connect?: CarOwnerProfileWhereUniqueInput
  }

  export type ServiceCenterProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ServiceCenterProfileCreateWithoutUserInput, ServiceCenterProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ServiceCenterProfileCreateOrConnectWithoutUserInput
    connect?: ServiceCenterProfileWhereUniqueInput
  }

  export type PartSellerProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PartSellerProfileCreateWithoutUserInput, PartSellerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PartSellerProfileCreateOrConnectWithoutUserInput
    connect?: PartSellerProfileWhereUniqueInput
  }

  export type VehicleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VehicleCreateWithoutUserInput, VehicleUncheckedCreateWithoutUserInput> | VehicleCreateWithoutUserInput[] | VehicleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutUserInput | VehicleCreateOrConnectWithoutUserInput[]
    createMany?: VehicleCreateManyUserInputEnvelope
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CarOwnerProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<CarOwnerProfileCreateWithoutUserInput, CarOwnerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: CarOwnerProfileCreateOrConnectWithoutUserInput
    upsert?: CarOwnerProfileUpsertWithoutUserInput
    disconnect?: CarOwnerProfileWhereInput | boolean
    delete?: CarOwnerProfileWhereInput | boolean
    connect?: CarOwnerProfileWhereUniqueInput
    update?: XOR<XOR<CarOwnerProfileUpdateToOneWithWhereWithoutUserInput, CarOwnerProfileUpdateWithoutUserInput>, CarOwnerProfileUncheckedUpdateWithoutUserInput>
  }

  export type ServiceCenterProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ServiceCenterProfileCreateWithoutUserInput, ServiceCenterProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ServiceCenterProfileCreateOrConnectWithoutUserInput
    upsert?: ServiceCenterProfileUpsertWithoutUserInput
    disconnect?: ServiceCenterProfileWhereInput | boolean
    delete?: ServiceCenterProfileWhereInput | boolean
    connect?: ServiceCenterProfileWhereUniqueInput
    update?: XOR<XOR<ServiceCenterProfileUpdateToOneWithWhereWithoutUserInput, ServiceCenterProfileUpdateWithoutUserInput>, ServiceCenterProfileUncheckedUpdateWithoutUserInput>
  }

  export type PartSellerProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<PartSellerProfileCreateWithoutUserInput, PartSellerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PartSellerProfileCreateOrConnectWithoutUserInput
    upsert?: PartSellerProfileUpsertWithoutUserInput
    disconnect?: PartSellerProfileWhereInput | boolean
    delete?: PartSellerProfileWhereInput | boolean
    connect?: PartSellerProfileWhereUniqueInput
    update?: XOR<XOR<PartSellerProfileUpdateToOneWithWhereWithoutUserInput, PartSellerProfileUpdateWithoutUserInput>, PartSellerProfileUncheckedUpdateWithoutUserInput>
  }

  export type VehicleUpdateManyWithoutUserNestedInput = {
    create?: XOR<VehicleCreateWithoutUserInput, VehicleUncheckedCreateWithoutUserInput> | VehicleCreateWithoutUserInput[] | VehicleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutUserInput | VehicleCreateOrConnectWithoutUserInput[]
    upsert?: VehicleUpsertWithWhereUniqueWithoutUserInput | VehicleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VehicleCreateManyUserInputEnvelope
    set?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    disconnect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    delete?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    update?: VehicleUpdateWithWhereUniqueWithoutUserInput | VehicleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VehicleUpdateManyWithWhereWithoutUserInput | VehicleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
  }

  export type SubscriptionUpdateOneWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    upsert?: SubscriptionUpsertWithoutUserInput
    disconnect?: SubscriptionWhereInput | boolean
    delete?: SubscriptionWhereInput | boolean
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutUserInput, SubscriptionUpdateWithoutUserInput>, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CarOwnerProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CarOwnerProfileCreateWithoutUserInput, CarOwnerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: CarOwnerProfileCreateOrConnectWithoutUserInput
    upsert?: CarOwnerProfileUpsertWithoutUserInput
    disconnect?: CarOwnerProfileWhereInput | boolean
    delete?: CarOwnerProfileWhereInput | boolean
    connect?: CarOwnerProfileWhereUniqueInput
    update?: XOR<XOR<CarOwnerProfileUpdateToOneWithWhereWithoutUserInput, CarOwnerProfileUpdateWithoutUserInput>, CarOwnerProfileUncheckedUpdateWithoutUserInput>
  }

  export type ServiceCenterProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ServiceCenterProfileCreateWithoutUserInput, ServiceCenterProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ServiceCenterProfileCreateOrConnectWithoutUserInput
    upsert?: ServiceCenterProfileUpsertWithoutUserInput
    disconnect?: ServiceCenterProfileWhereInput | boolean
    delete?: ServiceCenterProfileWhereInput | boolean
    connect?: ServiceCenterProfileWhereUniqueInput
    update?: XOR<XOR<ServiceCenterProfileUpdateToOneWithWhereWithoutUserInput, ServiceCenterProfileUpdateWithoutUserInput>, ServiceCenterProfileUncheckedUpdateWithoutUserInput>
  }

  export type PartSellerProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PartSellerProfileCreateWithoutUserInput, PartSellerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PartSellerProfileCreateOrConnectWithoutUserInput
    upsert?: PartSellerProfileUpsertWithoutUserInput
    disconnect?: PartSellerProfileWhereInput | boolean
    delete?: PartSellerProfileWhereInput | boolean
    connect?: PartSellerProfileWhereUniqueInput
    update?: XOR<XOR<PartSellerProfileUpdateToOneWithWhereWithoutUserInput, PartSellerProfileUpdateWithoutUserInput>, PartSellerProfileUncheckedUpdateWithoutUserInput>
  }

  export type VehicleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VehicleCreateWithoutUserInput, VehicleUncheckedCreateWithoutUserInput> | VehicleCreateWithoutUserInput[] | VehicleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutUserInput | VehicleCreateOrConnectWithoutUserInput[]
    upsert?: VehicleUpsertWithWhereUniqueWithoutUserInput | VehicleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VehicleCreateManyUserInputEnvelope
    set?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    disconnect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    delete?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    update?: VehicleUpdateWithWhereUniqueWithoutUserInput | VehicleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VehicleUpdateManyWithWhereWithoutUserInput | VehicleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    upsert?: SubscriptionUpsertWithoutUserInput
    disconnect?: SubscriptionWhereInput | boolean
    delete?: SubscriptionWhereInput | boolean
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutUserInput, SubscriptionUpdateWithoutUserInput>, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutCarOwnerProfileInput = {
    create?: XOR<UserCreateWithoutCarOwnerProfileInput, UserUncheckedCreateWithoutCarOwnerProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutCarOwnerProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCarOwnerProfileNestedInput = {
    create?: XOR<UserCreateWithoutCarOwnerProfileInput, UserUncheckedCreateWithoutCarOwnerProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutCarOwnerProfileInput
    upsert?: UserUpsertWithoutCarOwnerProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCarOwnerProfileInput, UserUpdateWithoutCarOwnerProfileInput>, UserUncheckedUpdateWithoutCarOwnerProfileInput>
  }

  export type UserCreateNestedOneWithoutVehiclesInput = {
    create?: XOR<UserCreateWithoutVehiclesInput, UserUncheckedCreateWithoutVehiclesInput>
    connectOrCreate?: UserCreateOrConnectWithoutVehiclesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutVehiclesNestedInput = {
    create?: XOR<UserCreateWithoutVehiclesInput, UserUncheckedCreateWithoutVehiclesInput>
    connectOrCreate?: UserCreateOrConnectWithoutVehiclesInput
    upsert?: UserUpsertWithoutVehiclesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVehiclesInput, UserUpdateWithoutVehiclesInput>, UserUncheckedUpdateWithoutVehiclesInput>
  }

  export type UserCreateNestedOneWithoutServiceCenterProfileInput = {
    create?: XOR<UserCreateWithoutServiceCenterProfileInput, UserUncheckedCreateWithoutServiceCenterProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutServiceCenterProfileInput
    connect?: UserWhereUniqueInput
  }

  export type ShopServiceCreateNestedManyWithoutServiceCenterInput = {
    create?: XOR<ShopServiceCreateWithoutServiceCenterInput, ShopServiceUncheckedCreateWithoutServiceCenterInput> | ShopServiceCreateWithoutServiceCenterInput[] | ShopServiceUncheckedCreateWithoutServiceCenterInput[]
    connectOrCreate?: ShopServiceCreateOrConnectWithoutServiceCenterInput | ShopServiceCreateOrConnectWithoutServiceCenterInput[]
    createMany?: ShopServiceCreateManyServiceCenterInputEnvelope
    connect?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
  }

  export type ShopServiceUncheckedCreateNestedManyWithoutServiceCenterInput = {
    create?: XOR<ShopServiceCreateWithoutServiceCenterInput, ShopServiceUncheckedCreateWithoutServiceCenterInput> | ShopServiceCreateWithoutServiceCenterInput[] | ShopServiceUncheckedCreateWithoutServiceCenterInput[]
    connectOrCreate?: ShopServiceCreateOrConnectWithoutServiceCenterInput | ShopServiceCreateOrConnectWithoutServiceCenterInput[]
    createMany?: ShopServiceCreateManyServiceCenterInputEnvelope
    connect?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutServiceCenterProfileNestedInput = {
    create?: XOR<UserCreateWithoutServiceCenterProfileInput, UserUncheckedCreateWithoutServiceCenterProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutServiceCenterProfileInput
    upsert?: UserUpsertWithoutServiceCenterProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutServiceCenterProfileInput, UserUpdateWithoutServiceCenterProfileInput>, UserUncheckedUpdateWithoutServiceCenterProfileInput>
  }

  export type ShopServiceUpdateManyWithoutServiceCenterNestedInput = {
    create?: XOR<ShopServiceCreateWithoutServiceCenterInput, ShopServiceUncheckedCreateWithoutServiceCenterInput> | ShopServiceCreateWithoutServiceCenterInput[] | ShopServiceUncheckedCreateWithoutServiceCenterInput[]
    connectOrCreate?: ShopServiceCreateOrConnectWithoutServiceCenterInput | ShopServiceCreateOrConnectWithoutServiceCenterInput[]
    upsert?: ShopServiceUpsertWithWhereUniqueWithoutServiceCenterInput | ShopServiceUpsertWithWhereUniqueWithoutServiceCenterInput[]
    createMany?: ShopServiceCreateManyServiceCenterInputEnvelope
    set?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    disconnect?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    delete?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    connect?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    update?: ShopServiceUpdateWithWhereUniqueWithoutServiceCenterInput | ShopServiceUpdateWithWhereUniqueWithoutServiceCenterInput[]
    updateMany?: ShopServiceUpdateManyWithWhereWithoutServiceCenterInput | ShopServiceUpdateManyWithWhereWithoutServiceCenterInput[]
    deleteMany?: ShopServiceScalarWhereInput | ShopServiceScalarWhereInput[]
  }

  export type ShopServiceUncheckedUpdateManyWithoutServiceCenterNestedInput = {
    create?: XOR<ShopServiceCreateWithoutServiceCenterInput, ShopServiceUncheckedCreateWithoutServiceCenterInput> | ShopServiceCreateWithoutServiceCenterInput[] | ShopServiceUncheckedCreateWithoutServiceCenterInput[]
    connectOrCreate?: ShopServiceCreateOrConnectWithoutServiceCenterInput | ShopServiceCreateOrConnectWithoutServiceCenterInput[]
    upsert?: ShopServiceUpsertWithWhereUniqueWithoutServiceCenterInput | ShopServiceUpsertWithWhereUniqueWithoutServiceCenterInput[]
    createMany?: ShopServiceCreateManyServiceCenterInputEnvelope
    set?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    disconnect?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    delete?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    connect?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    update?: ShopServiceUpdateWithWhereUniqueWithoutServiceCenterInput | ShopServiceUpdateWithWhereUniqueWithoutServiceCenterInput[]
    updateMany?: ShopServiceUpdateManyWithWhereWithoutServiceCenterInput | ShopServiceUpdateManyWithWhereWithoutServiceCenterInput[]
    deleteMany?: ShopServiceScalarWhereInput | ShopServiceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPartSellerProfileInput = {
    create?: XOR<UserCreateWithoutPartSellerProfileInput, UserUncheckedCreateWithoutPartSellerProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPartSellerProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPartSellerProfileNestedInput = {
    create?: XOR<UserCreateWithoutPartSellerProfileInput, UserUncheckedCreateWithoutPartSellerProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPartSellerProfileInput
    upsert?: UserUpsertWithoutPartSellerProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPartSellerProfileInput, UserUpdateWithoutPartSellerProfileInput>, UserUncheckedUpdateWithoutPartSellerProfileInput>
  }

  export type UserCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSubscriptionNestedInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    upsert?: UserUpsertWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscriptionInput, UserUpdateWithoutSubscriptionInput>, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type ShopServiceCreateNestedManyWithoutServiceTypeInput = {
    create?: XOR<ShopServiceCreateWithoutServiceTypeInput, ShopServiceUncheckedCreateWithoutServiceTypeInput> | ShopServiceCreateWithoutServiceTypeInput[] | ShopServiceUncheckedCreateWithoutServiceTypeInput[]
    connectOrCreate?: ShopServiceCreateOrConnectWithoutServiceTypeInput | ShopServiceCreateOrConnectWithoutServiceTypeInput[]
    createMany?: ShopServiceCreateManyServiceTypeInputEnvelope
    connect?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
  }

  export type ShopServiceUncheckedCreateNestedManyWithoutServiceTypeInput = {
    create?: XOR<ShopServiceCreateWithoutServiceTypeInput, ShopServiceUncheckedCreateWithoutServiceTypeInput> | ShopServiceCreateWithoutServiceTypeInput[] | ShopServiceUncheckedCreateWithoutServiceTypeInput[]
    connectOrCreate?: ShopServiceCreateOrConnectWithoutServiceTypeInput | ShopServiceCreateOrConnectWithoutServiceTypeInput[]
    createMany?: ShopServiceCreateManyServiceTypeInputEnvelope
    connect?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
  }

  export type ShopServiceUpdateManyWithoutServiceTypeNestedInput = {
    create?: XOR<ShopServiceCreateWithoutServiceTypeInput, ShopServiceUncheckedCreateWithoutServiceTypeInput> | ShopServiceCreateWithoutServiceTypeInput[] | ShopServiceUncheckedCreateWithoutServiceTypeInput[]
    connectOrCreate?: ShopServiceCreateOrConnectWithoutServiceTypeInput | ShopServiceCreateOrConnectWithoutServiceTypeInput[]
    upsert?: ShopServiceUpsertWithWhereUniqueWithoutServiceTypeInput | ShopServiceUpsertWithWhereUniqueWithoutServiceTypeInput[]
    createMany?: ShopServiceCreateManyServiceTypeInputEnvelope
    set?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    disconnect?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    delete?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    connect?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    update?: ShopServiceUpdateWithWhereUniqueWithoutServiceTypeInput | ShopServiceUpdateWithWhereUniqueWithoutServiceTypeInput[]
    updateMany?: ShopServiceUpdateManyWithWhereWithoutServiceTypeInput | ShopServiceUpdateManyWithWhereWithoutServiceTypeInput[]
    deleteMany?: ShopServiceScalarWhereInput | ShopServiceScalarWhereInput[]
  }

  export type ShopServiceUncheckedUpdateManyWithoutServiceTypeNestedInput = {
    create?: XOR<ShopServiceCreateWithoutServiceTypeInput, ShopServiceUncheckedCreateWithoutServiceTypeInput> | ShopServiceCreateWithoutServiceTypeInput[] | ShopServiceUncheckedCreateWithoutServiceTypeInput[]
    connectOrCreate?: ShopServiceCreateOrConnectWithoutServiceTypeInput | ShopServiceCreateOrConnectWithoutServiceTypeInput[]
    upsert?: ShopServiceUpsertWithWhereUniqueWithoutServiceTypeInput | ShopServiceUpsertWithWhereUniqueWithoutServiceTypeInput[]
    createMany?: ShopServiceCreateManyServiceTypeInputEnvelope
    set?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    disconnect?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    delete?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    connect?: ShopServiceWhereUniqueInput | ShopServiceWhereUniqueInput[]
    update?: ShopServiceUpdateWithWhereUniqueWithoutServiceTypeInput | ShopServiceUpdateWithWhereUniqueWithoutServiceTypeInput[]
    updateMany?: ShopServiceUpdateManyWithWhereWithoutServiceTypeInput | ShopServiceUpdateManyWithWhereWithoutServiceTypeInput[]
    deleteMany?: ShopServiceScalarWhereInput | ShopServiceScalarWhereInput[]
  }

  export type ServiceCenterProfileCreateNestedOneWithoutShopServicesInput = {
    create?: XOR<ServiceCenterProfileCreateWithoutShopServicesInput, ServiceCenterProfileUncheckedCreateWithoutShopServicesInput>
    connectOrCreate?: ServiceCenterProfileCreateOrConnectWithoutShopServicesInput
    connect?: ServiceCenterProfileWhereUniqueInput
  }

  export type ServiceTypeCreateNestedOneWithoutShopServicesInput = {
    create?: XOR<ServiceTypeCreateWithoutShopServicesInput, ServiceTypeUncheckedCreateWithoutShopServicesInput>
    connectOrCreate?: ServiceTypeCreateOrConnectWithoutShopServicesInput
    connect?: ServiceTypeWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ServiceCenterProfileUpdateOneRequiredWithoutShopServicesNestedInput = {
    create?: XOR<ServiceCenterProfileCreateWithoutShopServicesInput, ServiceCenterProfileUncheckedCreateWithoutShopServicesInput>
    connectOrCreate?: ServiceCenterProfileCreateOrConnectWithoutShopServicesInput
    upsert?: ServiceCenterProfileUpsertWithoutShopServicesInput
    connect?: ServiceCenterProfileWhereUniqueInput
    update?: XOR<XOR<ServiceCenterProfileUpdateToOneWithWhereWithoutShopServicesInput, ServiceCenterProfileUpdateWithoutShopServicesInput>, ServiceCenterProfileUncheckedUpdateWithoutShopServicesInput>
  }

  export type ServiceTypeUpdateOneWithoutShopServicesNestedInput = {
    create?: XOR<ServiceTypeCreateWithoutShopServicesInput, ServiceTypeUncheckedCreateWithoutShopServicesInput>
    connectOrCreate?: ServiceTypeCreateOrConnectWithoutShopServicesInput
    upsert?: ServiceTypeUpsertWithoutShopServicesInput
    disconnect?: ServiceTypeWhereInput | boolean
    delete?: ServiceTypeWhereInput | boolean
    connect?: ServiceTypeWhereUniqueInput
    update?: XOR<XOR<ServiceTypeUpdateToOneWithWhereWithoutShopServicesInput, ServiceTypeUpdateWithoutShopServicesInput>, ServiceTypeUncheckedUpdateWithoutShopServicesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type CarOwnerProfileCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarOwnerProfileUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarOwnerProfileCreateOrConnectWithoutUserInput = {
    where: CarOwnerProfileWhereUniqueInput
    create: XOR<CarOwnerProfileCreateWithoutUserInput, CarOwnerProfileUncheckedCreateWithoutUserInput>
  }

  export type ServiceCenterProfileCreateWithoutUserInput = {
    businessName: string
    address: string
    businessRegistrationNumber: string
    servicesOffered: string
    operatingHours: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shopServices?: ShopServiceCreateNestedManyWithoutServiceCenterInput
  }

  export type ServiceCenterProfileUncheckedCreateWithoutUserInput = {
    id?: number
    businessName: string
    address: string
    businessRegistrationNumber: string
    servicesOffered: string
    operatingHours: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shopServices?: ShopServiceUncheckedCreateNestedManyWithoutServiceCenterInput
  }

  export type ServiceCenterProfileCreateOrConnectWithoutUserInput = {
    where: ServiceCenterProfileWhereUniqueInput
    create: XOR<ServiceCenterProfileCreateWithoutUserInput, ServiceCenterProfileUncheckedCreateWithoutUserInput>
  }

  export type PartSellerProfileCreateWithoutUserInput = {
    shopName: string
    address: string
    categoriesSold: string
    inventoryCapacity?: string | null
    contactPersonName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartSellerProfileUncheckedCreateWithoutUserInput = {
    id?: number
    shopName: string
    address: string
    categoriesSold: string
    inventoryCapacity?: string | null
    contactPersonName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartSellerProfileCreateOrConnectWithoutUserInput = {
    where: PartSellerProfileWhereUniqueInput
    create: XOR<PartSellerProfileCreateWithoutUserInput, PartSellerProfileUncheckedCreateWithoutUserInput>
  }

  export type VehicleCreateWithoutUserInput = {
    vehicleName: string
    model: string
    year: number
    licensePlate: string
    color: string
    vehicleType: string
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VehicleUncheckedCreateWithoutUserInput = {
    id?: number
    vehicleName: string
    model: string
    year: number
    licensePlate: string
    color: string
    vehicleType: string
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VehicleCreateOrConnectWithoutUserInput = {
    where: VehicleWhereUniqueInput
    create: XOR<VehicleCreateWithoutUserInput, VehicleUncheckedCreateWithoutUserInput>
  }

  export type VehicleCreateManyUserInputEnvelope = {
    data: VehicleCreateManyUserInput | VehicleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutUserInput = {
    planType: string
    status: string
    startDate: Date | string
    endDate: Date | string
    paymentData: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUncheckedCreateWithoutUserInput = {
    id?: number
    planType: string
    status: string
    startDate: Date | string
    endDate: Date | string
    paymentData: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type CarOwnerProfileUpsertWithoutUserInput = {
    update: XOR<CarOwnerProfileUpdateWithoutUserInput, CarOwnerProfileUncheckedUpdateWithoutUserInput>
    create: XOR<CarOwnerProfileCreateWithoutUserInput, CarOwnerProfileUncheckedCreateWithoutUserInput>
    where?: CarOwnerProfileWhereInput
  }

  export type CarOwnerProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: CarOwnerProfileWhereInput
    data: XOR<CarOwnerProfileUpdateWithoutUserInput, CarOwnerProfileUncheckedUpdateWithoutUserInput>
  }

  export type CarOwnerProfileUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarOwnerProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCenterProfileUpsertWithoutUserInput = {
    update: XOR<ServiceCenterProfileUpdateWithoutUserInput, ServiceCenterProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ServiceCenterProfileCreateWithoutUserInput, ServiceCenterProfileUncheckedCreateWithoutUserInput>
    where?: ServiceCenterProfileWhereInput
  }

  export type ServiceCenterProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ServiceCenterProfileWhereInput
    data: XOR<ServiceCenterProfileUpdateWithoutUserInput, ServiceCenterProfileUncheckedUpdateWithoutUserInput>
  }

  export type ServiceCenterProfileUpdateWithoutUserInput = {
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    businessRegistrationNumber?: StringFieldUpdateOperationsInput | string
    servicesOffered?: StringFieldUpdateOperationsInput | string
    operatingHours?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopServices?: ShopServiceUpdateManyWithoutServiceCenterNestedInput
  }

  export type ServiceCenterProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    businessRegistrationNumber?: StringFieldUpdateOperationsInput | string
    servicesOffered?: StringFieldUpdateOperationsInput | string
    operatingHours?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopServices?: ShopServiceUncheckedUpdateManyWithoutServiceCenterNestedInput
  }

  export type PartSellerProfileUpsertWithoutUserInput = {
    update: XOR<PartSellerProfileUpdateWithoutUserInput, PartSellerProfileUncheckedUpdateWithoutUserInput>
    create: XOR<PartSellerProfileCreateWithoutUserInput, PartSellerProfileUncheckedCreateWithoutUserInput>
    where?: PartSellerProfileWhereInput
  }

  export type PartSellerProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: PartSellerProfileWhereInput
    data: XOR<PartSellerProfileUpdateWithoutUserInput, PartSellerProfileUncheckedUpdateWithoutUserInput>
  }

  export type PartSellerProfileUpdateWithoutUserInput = {
    shopName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    categoriesSold?: StringFieldUpdateOperationsInput | string
    inventoryCapacity?: NullableStringFieldUpdateOperationsInput | string | null
    contactPersonName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartSellerProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    shopName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    categoriesSold?: StringFieldUpdateOperationsInput | string
    inventoryCapacity?: NullableStringFieldUpdateOperationsInput | string | null
    contactPersonName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleUpsertWithWhereUniqueWithoutUserInput = {
    where: VehicleWhereUniqueInput
    update: XOR<VehicleUpdateWithoutUserInput, VehicleUncheckedUpdateWithoutUserInput>
    create: XOR<VehicleCreateWithoutUserInput, VehicleUncheckedCreateWithoutUserInput>
  }

  export type VehicleUpdateWithWhereUniqueWithoutUserInput = {
    where: VehicleWhereUniqueInput
    data: XOR<VehicleUpdateWithoutUserInput, VehicleUncheckedUpdateWithoutUserInput>
  }

  export type VehicleUpdateManyWithWhereWithoutUserInput = {
    where: VehicleScalarWhereInput
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyWithoutUserInput>
  }

  export type VehicleScalarWhereInput = {
    AND?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
    OR?: VehicleScalarWhereInput[]
    NOT?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
    id?: IntFilter<"Vehicle"> | number
    userId?: IntFilter<"Vehicle"> | number
    vehicleName?: StringFilter<"Vehicle"> | string
    model?: StringFilter<"Vehicle"> | string
    year?: IntFilter<"Vehicle"> | number
    licensePlate?: StringFilter<"Vehicle"> | string
    color?: StringFilter<"Vehicle"> | string
    vehicleType?: StringFilter<"Vehicle"> | string
    isPrimary?: BoolFilter<"Vehicle"> | boolean
    createdAt?: DateTimeFilter<"Vehicle"> | Date | string
    updatedAt?: DateTimeFilter<"Vehicle"> | Date | string
  }

  export type SubscriptionUpsertWithoutUserInput = {
    update: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    where?: SubscriptionWhereInput
  }

  export type SubscriptionUpdateToOneWithWhereWithoutUserInput = {
    where?: SubscriptionWhereInput
    data: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type SubscriptionUpdateWithoutUserInput = {
    planType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    planType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutCarOwnerProfileInput = {
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceCenterProfile?: ServiceCenterProfileCreateNestedOneWithoutUserInput
    partSellerProfile?: PartSellerProfileCreateNestedOneWithoutUserInput
    vehicles?: VehicleCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCarOwnerProfileInput = {
    id?: number
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceCenterProfile?: ServiceCenterProfileUncheckedCreateNestedOneWithoutUserInput
    partSellerProfile?: PartSellerProfileUncheckedCreateNestedOneWithoutUserInput
    vehicles?: VehicleUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCarOwnerProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCarOwnerProfileInput, UserUncheckedCreateWithoutCarOwnerProfileInput>
  }

  export type UserUpsertWithoutCarOwnerProfileInput = {
    update: XOR<UserUpdateWithoutCarOwnerProfileInput, UserUncheckedUpdateWithoutCarOwnerProfileInput>
    create: XOR<UserCreateWithoutCarOwnerProfileInput, UserUncheckedCreateWithoutCarOwnerProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCarOwnerProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCarOwnerProfileInput, UserUncheckedUpdateWithoutCarOwnerProfileInput>
  }

  export type UserUpdateWithoutCarOwnerProfileInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCenterProfile?: ServiceCenterProfileUpdateOneWithoutUserNestedInput
    partSellerProfile?: PartSellerProfileUpdateOneWithoutUserNestedInput
    vehicles?: VehicleUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCarOwnerProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCenterProfile?: ServiceCenterProfileUncheckedUpdateOneWithoutUserNestedInput
    partSellerProfile?: PartSellerProfileUncheckedUpdateOneWithoutUserNestedInput
    vehicles?: VehicleUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutVehiclesInput = {
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    carOwnerProfile?: CarOwnerProfileCreateNestedOneWithoutUserInput
    serviceCenterProfile?: ServiceCenterProfileCreateNestedOneWithoutUserInput
    partSellerProfile?: PartSellerProfileCreateNestedOneWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVehiclesInput = {
    id?: number
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    carOwnerProfile?: CarOwnerProfileUncheckedCreateNestedOneWithoutUserInput
    serviceCenterProfile?: ServiceCenterProfileUncheckedCreateNestedOneWithoutUserInput
    partSellerProfile?: PartSellerProfileUncheckedCreateNestedOneWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVehiclesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVehiclesInput, UserUncheckedCreateWithoutVehiclesInput>
  }

  export type UserUpsertWithoutVehiclesInput = {
    update: XOR<UserUpdateWithoutVehiclesInput, UserUncheckedUpdateWithoutVehiclesInput>
    create: XOR<UserCreateWithoutVehiclesInput, UserUncheckedCreateWithoutVehiclesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVehiclesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVehiclesInput, UserUncheckedUpdateWithoutVehiclesInput>
  }

  export type UserUpdateWithoutVehiclesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carOwnerProfile?: CarOwnerProfileUpdateOneWithoutUserNestedInput
    serviceCenterProfile?: ServiceCenterProfileUpdateOneWithoutUserNestedInput
    partSellerProfile?: PartSellerProfileUpdateOneWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carOwnerProfile?: CarOwnerProfileUncheckedUpdateOneWithoutUserNestedInput
    serviceCenterProfile?: ServiceCenterProfileUncheckedUpdateOneWithoutUserNestedInput
    partSellerProfile?: PartSellerProfileUncheckedUpdateOneWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutServiceCenterProfileInput = {
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    carOwnerProfile?: CarOwnerProfileCreateNestedOneWithoutUserInput
    partSellerProfile?: PartSellerProfileCreateNestedOneWithoutUserInput
    vehicles?: VehicleCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutServiceCenterProfileInput = {
    id?: number
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    carOwnerProfile?: CarOwnerProfileUncheckedCreateNestedOneWithoutUserInput
    partSellerProfile?: PartSellerProfileUncheckedCreateNestedOneWithoutUserInput
    vehicles?: VehicleUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutServiceCenterProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutServiceCenterProfileInput, UserUncheckedCreateWithoutServiceCenterProfileInput>
  }

  export type ShopServiceCreateWithoutServiceCenterInput = {
    name: string
    description?: string | null
    price: number
    unit: string
    duration?: number | null
    discount?: number | null
    isActive?: boolean
    serviceType?: ServiceTypeCreateNestedOneWithoutShopServicesInput
  }

  export type ShopServiceUncheckedCreateWithoutServiceCenterInput = {
    id?: number
    serviceTypeId?: number | null
    name: string
    description?: string | null
    price: number
    unit: string
    duration?: number | null
    discount?: number | null
    isActive?: boolean
  }

  export type ShopServiceCreateOrConnectWithoutServiceCenterInput = {
    where: ShopServiceWhereUniqueInput
    create: XOR<ShopServiceCreateWithoutServiceCenterInput, ShopServiceUncheckedCreateWithoutServiceCenterInput>
  }

  export type ShopServiceCreateManyServiceCenterInputEnvelope = {
    data: ShopServiceCreateManyServiceCenterInput | ShopServiceCreateManyServiceCenterInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutServiceCenterProfileInput = {
    update: XOR<UserUpdateWithoutServiceCenterProfileInput, UserUncheckedUpdateWithoutServiceCenterProfileInput>
    create: XOR<UserCreateWithoutServiceCenterProfileInput, UserUncheckedCreateWithoutServiceCenterProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutServiceCenterProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutServiceCenterProfileInput, UserUncheckedUpdateWithoutServiceCenterProfileInput>
  }

  export type UserUpdateWithoutServiceCenterProfileInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carOwnerProfile?: CarOwnerProfileUpdateOneWithoutUserNestedInput
    partSellerProfile?: PartSellerProfileUpdateOneWithoutUserNestedInput
    vehicles?: VehicleUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutServiceCenterProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carOwnerProfile?: CarOwnerProfileUncheckedUpdateOneWithoutUserNestedInput
    partSellerProfile?: PartSellerProfileUncheckedUpdateOneWithoutUserNestedInput
    vehicles?: VehicleUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ShopServiceUpsertWithWhereUniqueWithoutServiceCenterInput = {
    where: ShopServiceWhereUniqueInput
    update: XOR<ShopServiceUpdateWithoutServiceCenterInput, ShopServiceUncheckedUpdateWithoutServiceCenterInput>
    create: XOR<ShopServiceCreateWithoutServiceCenterInput, ShopServiceUncheckedCreateWithoutServiceCenterInput>
  }

  export type ShopServiceUpdateWithWhereUniqueWithoutServiceCenterInput = {
    where: ShopServiceWhereUniqueInput
    data: XOR<ShopServiceUpdateWithoutServiceCenterInput, ShopServiceUncheckedUpdateWithoutServiceCenterInput>
  }

  export type ShopServiceUpdateManyWithWhereWithoutServiceCenterInput = {
    where: ShopServiceScalarWhereInput
    data: XOR<ShopServiceUpdateManyMutationInput, ShopServiceUncheckedUpdateManyWithoutServiceCenterInput>
  }

  export type ShopServiceScalarWhereInput = {
    AND?: ShopServiceScalarWhereInput | ShopServiceScalarWhereInput[]
    OR?: ShopServiceScalarWhereInput[]
    NOT?: ShopServiceScalarWhereInput | ShopServiceScalarWhereInput[]
    id?: IntFilter<"ShopService"> | number
    serviceCenterId?: IntFilter<"ShopService"> | number
    serviceTypeId?: IntNullableFilter<"ShopService"> | number | null
    name?: StringFilter<"ShopService"> | string
    description?: StringNullableFilter<"ShopService"> | string | null
    price?: FloatFilter<"ShopService"> | number
    unit?: StringFilter<"ShopService"> | string
    duration?: FloatNullableFilter<"ShopService"> | number | null
    discount?: FloatNullableFilter<"ShopService"> | number | null
    isActive?: BoolFilter<"ShopService"> | boolean
  }

  export type UserCreateWithoutPartSellerProfileInput = {
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    carOwnerProfile?: CarOwnerProfileCreateNestedOneWithoutUserInput
    serviceCenterProfile?: ServiceCenterProfileCreateNestedOneWithoutUserInput
    vehicles?: VehicleCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPartSellerProfileInput = {
    id?: number
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    carOwnerProfile?: CarOwnerProfileUncheckedCreateNestedOneWithoutUserInput
    serviceCenterProfile?: ServiceCenterProfileUncheckedCreateNestedOneWithoutUserInput
    vehicles?: VehicleUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPartSellerProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPartSellerProfileInput, UserUncheckedCreateWithoutPartSellerProfileInput>
  }

  export type UserUpsertWithoutPartSellerProfileInput = {
    update: XOR<UserUpdateWithoutPartSellerProfileInput, UserUncheckedUpdateWithoutPartSellerProfileInput>
    create: XOR<UserCreateWithoutPartSellerProfileInput, UserUncheckedCreateWithoutPartSellerProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPartSellerProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPartSellerProfileInput, UserUncheckedUpdateWithoutPartSellerProfileInput>
  }

  export type UserUpdateWithoutPartSellerProfileInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carOwnerProfile?: CarOwnerProfileUpdateOneWithoutUserNestedInput
    serviceCenterProfile?: ServiceCenterProfileUpdateOneWithoutUserNestedInput
    vehicles?: VehicleUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPartSellerProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carOwnerProfile?: CarOwnerProfileUncheckedUpdateOneWithoutUserNestedInput
    serviceCenterProfile?: ServiceCenterProfileUncheckedUpdateOneWithoutUserNestedInput
    vehicles?: VehicleUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutSubscriptionInput = {
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    carOwnerProfile?: CarOwnerProfileCreateNestedOneWithoutUserInput
    serviceCenterProfile?: ServiceCenterProfileCreateNestedOneWithoutUserInput
    partSellerProfile?: PartSellerProfileCreateNestedOneWithoutUserInput
    vehicles?: VehicleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubscriptionInput = {
    id?: number
    email: string
    password?: string | null
    name?: string | null
    phone?: string | null
    role?: string
    isRegistrationComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    carOwnerProfile?: CarOwnerProfileUncheckedCreateNestedOneWithoutUserInput
    serviceCenterProfile?: ServiceCenterProfileUncheckedCreateNestedOneWithoutUserInput
    partSellerProfile?: PartSellerProfileUncheckedCreateNestedOneWithoutUserInput
    vehicles?: VehicleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubscriptionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
  }

  export type UserUpsertWithoutSubscriptionInput = {
    update: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type UserUpdateWithoutSubscriptionInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carOwnerProfile?: CarOwnerProfileUpdateOneWithoutUserNestedInput
    serviceCenterProfile?: ServiceCenterProfileUpdateOneWithoutUserNestedInput
    partSellerProfile?: PartSellerProfileUpdateOneWithoutUserNestedInput
    vehicles?: VehicleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    isRegistrationComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carOwnerProfile?: CarOwnerProfileUncheckedUpdateOneWithoutUserNestedInput
    serviceCenterProfile?: ServiceCenterProfileUncheckedUpdateOneWithoutUserNestedInput
    partSellerProfile?: PartSellerProfileUncheckedUpdateOneWithoutUserNestedInput
    vehicles?: VehicleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ShopServiceCreateWithoutServiceTypeInput = {
    name: string
    description?: string | null
    price: number
    unit: string
    duration?: number | null
    discount?: number | null
    isActive?: boolean
    serviceCenter: ServiceCenterProfileCreateNestedOneWithoutShopServicesInput
  }

  export type ShopServiceUncheckedCreateWithoutServiceTypeInput = {
    id?: number
    serviceCenterId: number
    name: string
    description?: string | null
    price: number
    unit: string
    duration?: number | null
    discount?: number | null
    isActive?: boolean
  }

  export type ShopServiceCreateOrConnectWithoutServiceTypeInput = {
    where: ShopServiceWhereUniqueInput
    create: XOR<ShopServiceCreateWithoutServiceTypeInput, ShopServiceUncheckedCreateWithoutServiceTypeInput>
  }

  export type ShopServiceCreateManyServiceTypeInputEnvelope = {
    data: ShopServiceCreateManyServiceTypeInput | ShopServiceCreateManyServiceTypeInput[]
    skipDuplicates?: boolean
  }

  export type ShopServiceUpsertWithWhereUniqueWithoutServiceTypeInput = {
    where: ShopServiceWhereUniqueInput
    update: XOR<ShopServiceUpdateWithoutServiceTypeInput, ShopServiceUncheckedUpdateWithoutServiceTypeInput>
    create: XOR<ShopServiceCreateWithoutServiceTypeInput, ShopServiceUncheckedCreateWithoutServiceTypeInput>
  }

  export type ShopServiceUpdateWithWhereUniqueWithoutServiceTypeInput = {
    where: ShopServiceWhereUniqueInput
    data: XOR<ShopServiceUpdateWithoutServiceTypeInput, ShopServiceUncheckedUpdateWithoutServiceTypeInput>
  }

  export type ShopServiceUpdateManyWithWhereWithoutServiceTypeInput = {
    where: ShopServiceScalarWhereInput
    data: XOR<ShopServiceUpdateManyMutationInput, ShopServiceUncheckedUpdateManyWithoutServiceTypeInput>
  }

  export type ServiceCenterProfileCreateWithoutShopServicesInput = {
    businessName: string
    address: string
    businessRegistrationNumber: string
    servicesOffered: string
    operatingHours: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutServiceCenterProfileInput
  }

  export type ServiceCenterProfileUncheckedCreateWithoutShopServicesInput = {
    id?: number
    userId: number
    businessName: string
    address: string
    businessRegistrationNumber: string
    servicesOffered: string
    operatingHours: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCenterProfileCreateOrConnectWithoutShopServicesInput = {
    where: ServiceCenterProfileWhereUniqueInput
    create: XOR<ServiceCenterProfileCreateWithoutShopServicesInput, ServiceCenterProfileUncheckedCreateWithoutShopServicesInput>
  }

  export type ServiceTypeCreateWithoutShopServicesInput = {
    name: string
    description?: string | null
  }

  export type ServiceTypeUncheckedCreateWithoutShopServicesInput = {
    id?: number
    name: string
    description?: string | null
  }

  export type ServiceTypeCreateOrConnectWithoutShopServicesInput = {
    where: ServiceTypeWhereUniqueInput
    create: XOR<ServiceTypeCreateWithoutShopServicesInput, ServiceTypeUncheckedCreateWithoutShopServicesInput>
  }

  export type ServiceCenterProfileUpsertWithoutShopServicesInput = {
    update: XOR<ServiceCenterProfileUpdateWithoutShopServicesInput, ServiceCenterProfileUncheckedUpdateWithoutShopServicesInput>
    create: XOR<ServiceCenterProfileCreateWithoutShopServicesInput, ServiceCenterProfileUncheckedCreateWithoutShopServicesInput>
    where?: ServiceCenterProfileWhereInput
  }

  export type ServiceCenterProfileUpdateToOneWithWhereWithoutShopServicesInput = {
    where?: ServiceCenterProfileWhereInput
    data: XOR<ServiceCenterProfileUpdateWithoutShopServicesInput, ServiceCenterProfileUncheckedUpdateWithoutShopServicesInput>
  }

  export type ServiceCenterProfileUpdateWithoutShopServicesInput = {
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    businessRegistrationNumber?: StringFieldUpdateOperationsInput | string
    servicesOffered?: StringFieldUpdateOperationsInput | string
    operatingHours?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutServiceCenterProfileNestedInput
  }

  export type ServiceCenterProfileUncheckedUpdateWithoutShopServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    businessRegistrationNumber?: StringFieldUpdateOperationsInput | string
    servicesOffered?: StringFieldUpdateOperationsInput | string
    operatingHours?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceTypeUpsertWithoutShopServicesInput = {
    update: XOR<ServiceTypeUpdateWithoutShopServicesInput, ServiceTypeUncheckedUpdateWithoutShopServicesInput>
    create: XOR<ServiceTypeCreateWithoutShopServicesInput, ServiceTypeUncheckedCreateWithoutShopServicesInput>
    where?: ServiceTypeWhereInput
  }

  export type ServiceTypeUpdateToOneWithWhereWithoutShopServicesInput = {
    where?: ServiceTypeWhereInput
    data: XOR<ServiceTypeUpdateWithoutShopServicesInput, ServiceTypeUncheckedUpdateWithoutShopServicesInput>
  }

  export type ServiceTypeUpdateWithoutShopServicesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceTypeUncheckedUpdateWithoutShopServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VehicleCreateManyUserInput = {
    id?: number
    vehicleName: string
    model: string
    year: number
    licensePlate: string
    color: string
    vehicleType: string
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VehicleUpdateWithoutUserInput = {
    vehicleName?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    licensePlate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    vehicleName?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    licensePlate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    vehicleName?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    licensePlate?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopServiceCreateManyServiceCenterInput = {
    id?: number
    serviceTypeId?: number | null
    name: string
    description?: string | null
    price: number
    unit: string
    duration?: number | null
    discount?: number | null
    isActive?: boolean
  }

  export type ShopServiceUpdateWithoutServiceCenterInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    serviceType?: ServiceTypeUpdateOneWithoutShopServicesNestedInput
  }

  export type ShopServiceUncheckedUpdateWithoutServiceCenterInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ShopServiceUncheckedUpdateManyWithoutServiceCenterInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ShopServiceCreateManyServiceTypeInput = {
    id?: number
    serviceCenterId: number
    name: string
    description?: string | null
    price: number
    unit: string
    duration?: number | null
    discount?: number | null
    isActive?: boolean
  }

  export type ShopServiceUpdateWithoutServiceTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    serviceCenter?: ServiceCenterProfileUpdateOneRequiredWithoutShopServicesNestedInput
  }

  export type ShopServiceUncheckedUpdateWithoutServiceTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceCenterId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ShopServiceUncheckedUpdateManyWithoutServiceTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceCenterId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}